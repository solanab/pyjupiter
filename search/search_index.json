{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jupiter Python SDK","text":"<p>A high-performance, async-first Python SDK for seamless interaction with the Jupiter Ultra API, powered by <code>curl_cffi</code> for maximum speed and flexibility.</p> <p>With Ultra API, you don't need to manage or connect to any RPC endpoints, or deal with complex configurations. Everything from getting quotes to transaction execution happens directly through a powerful API.</p> <p>Or as we like to say around here: \"RPCs are for NPCs.\"</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"Feature Description \u26a1 High Performance Built on <code>curl_cffi</code> for blazing-fast HTTP requests \ud83d\udd04 Async/Sync Support Both asynchronous and synchronous clients available \ud83d\udee1\ufe0f Token Safety Built-in shield API for token security warnings \ud83d\udcb0 Balance Checking Easy balance retrieval for any Solana address \ud83d\udd27 Advanced Configuration Support for proxies, custom DNS, and more \ud83d\udce6 Type Safety Full type hints with Pydantic models \ud83c\udfaf Zero Configuration Works out of the box with minimal setup"},{"location":"#what-makes-jupiter-python-sdk-special","title":"\ud83c\udf1f What Makes Jupiter Python SDK Special?","text":"<ul> <li>Ultra API Integration: Direct access to Jupiter's powerful trading infrastructure</li> <li>No RPC Management: Forget about RPC endpoints, node management, and complex configurations</li> <li>Developer-Friendly: Intuitive API design with comprehensive error handling</li> <li>Production-Ready: Built for high-frequency trading and enterprise applications</li> <li>Flexible: Support for both async and sync programming patterns</li> </ul>"},{"location":"#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>A Solana wallet private key (for transaction signing)</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<ul> <li>DeFi Applications: Build sophisticated DeFi applications with token swapping</li> <li>Trading Bots: Create automated trading strategies on Solana</li> <li>Portfolio Management: Track and manage token balances across multiple wallets</li> <li>Token Analysis: Analyze token safety and market data</li> <li>Arbitrage Systems: Build arbitrage bots using Jupiter's liquidity</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>graph TB\n    A[Python Application] --&gt; B[Jupiter Python SDK]\n    B --&gt; C[Jupiter Ultra API]\n    C --&gt; D[Solana Blockchain]\n\n    B --&gt; E[AsyncUltraApiClient]\n    B --&gt; F[UltraApiClient]\n\n    E --&gt; G[order]\n    E --&gt; H[execute]\n    E --&gt; I[balances]\n    E --&gt; J[shield]</code></pre>"},{"location":"#documentation-navigation","title":"\ud83d\udcda Documentation Navigation","text":"Section Description Getting Started Installation, setup, and your first swap API Reference Complete API documentation with examples Examples Real-world code examples and use cases"},{"location":"#quick-example","title":"\ud83d\ude80 Quick Example","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def main():\n    # Initialize the async client\n    client = AsyncUltraApiClient()\n\n    # Create a swap order\n    order_request = UltraOrderRequest(\n        input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n        output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        amount=10000000,  # 0.01 WSOL\n        taker=await client.get_public_key(),\n    )\n\n    try:\n        # Execute the swap\n        response = await client.order_and_execute(order_request)\n        print(f\"\u2705 Transaction: https://solscan.io/tx/{response['signature']}\")\n    finally:\n        await client.close()\n\nasyncio.run(main())\n</code></pre>"},{"location":"#community-support","title":"\ud83e\udd1d Community &amp; Support","text":"<ul> <li>GitHub: pyjupiter Repository</li> <li>Discord: Jupiter Community</li> <li>Documentation: Ultra API Docs</li> <li>API Portal: Get Your API Key</li> </ul>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Ready to get started? Check out our Getting Started Guide to begin building with Jupiter Python SDK!</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete reference documentation for the Jupiter Python SDK.</p>"},{"location":"api-reference/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Client Classes</li> <li>Core Methods</li> <li>Data Models</li> <li>Configuration</li> <li>Error Handling</li> <li>Utility Methods</li> </ul>"},{"location":"api-reference/#client-classes","title":"\ud83c\udfdb\ufe0f Client Classes","text":""},{"location":"api-reference/#asyncultraapiclient","title":"AsyncUltraApiClient","text":"<p>The main asynchronous client for Jupiter Ultra API interactions.</p> <pre><code>from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclient = AsyncUltraApiClient(\n    api_key=\"optional_api_key\",\n    private_key_env_var=\"PRIVATE_KEY\",\n    client_kwargs={}\n)\n</code></pre> <p>Constructor Parameters:</p> Parameter Type Default Description <code>api_key</code> <code>str \\| None</code> <code>None</code> Jupiter API key for enhanced features <code>private_key_env_var</code> <code>str</code> <code>\"PRIVATE_KEY\"</code> Environment variable name for private key <code>client_kwargs</code> <code>dict</code> <code>{}</code> Additional curl_cffi client configuration"},{"location":"api-reference/#ultraapiclient","title":"UltraApiClient","text":"<p>The synchronous client for Jupiter Ultra API interactions.</p> <pre><code>from pyjupiter.clients.ultra_api_client import UltraApiClient\n\nclient = UltraApiClient(\n    api_key=\"optional_api_key\",\n    private_key_env_var=\"PRIVATE_KEY\",\n    client_kwargs={}\n)\n</code></pre> <p>Constructor Parameters: Same as <code>AsyncUltraApiClient</code></p>"},{"location":"api-reference/#core-methods","title":"\ud83d\udd27 Core Methods","text":""},{"location":"api-reference/#order","title":"order()","text":"<p>Create a swap order without executing it.</p>"},{"location":"api-reference/#signature","title":"Signature","text":"<pre><code># Async\nasync def order(self, request: UltraOrderRequest) -&gt; dict\n\n# Sync\ndef order(self, request: UltraOrderRequest) -&gt; dict\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"Parameter Type Description <code>request</code> <code>UltraOrderRequest</code> Order request configuration"},{"location":"api-reference/#returns","title":"Returns","text":"Field Type Description <code>requestId</code> <code>str</code> Unique identifier for the order <code>transaction</code> <code>str</code> Base64-encoded transaction <code>status</code> <code>str</code> Order status (<code>\"Success\"</code> or <code>\"Failed\"</code>)"},{"location":"api-reference/#example","title":"Example","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\norder_request = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    amount=10000000,\n    taker=await client.get_public_key()\n)\n\nresponse = await client.order(order_request)\n</code></pre>"},{"location":"api-reference/#execute","title":"execute()","text":"<p>Execute a previously created order.</p>"},{"location":"api-reference/#signature_1","title":"Signature","text":"<pre><code># Async\nasync def execute(self, request: UltraExecuteRequest) -&gt; dict\n\n# Sync\ndef execute(self, request: UltraExecuteRequest) -&gt; dict\n</code></pre>"},{"location":"api-reference/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>request</code> <code>UltraExecuteRequest</code> Execution request with signed transaction"},{"location":"api-reference/#returns_1","title":"Returns","text":"Field Type Description <code>signature</code> <code>str</code> Transaction signature <code>status</code> <code>str</code> Execution status (<code>\"Success\"</code> or <code>\"Failed\"</code>) <code>error</code> <code>str</code> Error message (if failed)"},{"location":"api-reference/#example_1","title":"Example","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_execute_request_model import UltraExecuteRequest\n\nexecute_request = UltraExecuteRequest(\n    request_id=response[\"requestId\"],\n    signed_transaction=\"base64_signed_transaction\"\n)\n\nresult = await client.execute(execute_request)\n</code></pre>"},{"location":"api-reference/#order_and_execute","title":"order_and_execute()","text":"<p>Create and execute an order in a single call.</p>"},{"location":"api-reference/#signature_2","title":"Signature","text":"<pre><code># Async\nasync def order_and_execute(self, request: UltraOrderRequest) -&gt; dict\n\n# Sync\ndef order_and_execute(self, request: UltraOrderRequest) -&gt; dict\n</code></pre>"},{"location":"api-reference/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>request</code> <code>UltraOrderRequest</code> Order request configuration"},{"location":"api-reference/#returns_2","title":"Returns","text":"<p>Same as <code>execute()</code> method.</p>"},{"location":"api-reference/#example_2","title":"Example","text":"<pre><code>response = await client.order_and_execute(order_request)\nprint(f\"Transaction: https://solscan.io/tx/{response['signature']}\")\n</code></pre>"},{"location":"api-reference/#balances","title":"balances()","text":"<p>Get token balances for a Solana address.</p>"},{"location":"api-reference/#signature_3","title":"Signature","text":"<pre><code># Async\nasync def balances(self, address: str) -&gt; dict\n\n# Sync\ndef balances(self, address: str) -&gt; dict\n</code></pre>"},{"location":"api-reference/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>address</code> <code>str</code> Solana public key address"},{"location":"api-reference/#returns_3","title":"Returns","text":"<p>Dictionary mapping token symbols to balance details:</p> Field Type Description <code>amount</code> <code>str</code> Raw amount in smallest unit <code>uiAmount</code> <code>float</code> Human-readable amount <code>slot</code> <code>int</code> Blockchain slot number <code>isFrozen</code> <code>bool</code> Whether the token account is frozen"},{"location":"api-reference/#example_3","title":"Example","text":"<pre><code>address = await client.get_public_key()\nbalances = await client.balances(address)\n\nfor token, details in balances.items():\n    print(f\"{token}: {details['uiAmount']} (Frozen: {details['isFrozen']})\")\n</code></pre>"},{"location":"api-reference/#shield","title":"shield()","text":"<p>Check tokens for safety warnings.</p>"},{"location":"api-reference/#signature_4","title":"Signature","text":"<pre><code># Async\nasync def shield(self, mints: list[str]) -&gt; dict\n\n# Sync\ndef shield(self, mints: list[str]) -&gt; dict\n</code></pre>"},{"location":"api-reference/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>mints</code> <code>list[str]</code> List of token mint addresses"},{"location":"api-reference/#returns_4","title":"Returns","text":"Field Type Description <code>warnings</code> <code>dict</code> Mapping of mint addresses to warning lists <p>Warning object structure:</p> Field Type Description <code>type</code> <code>str</code> Warning type <code>message</code> <code>str</code> Warning description"},{"location":"api-reference/#example_4","title":"Example","text":"<pre><code>mints = [\n    \"So11111111111111111111111111111111111111112\",  # WSOL\n    \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n]\n\nshield_response = await client.shield(mints)\n\nfor mint, warnings in shield_response.get(\"warnings\", {}).items():\n    if warnings:\n        print(f\"\u26a0\ufe0f {mint} has warnings:\")\n        for warning in warnings:\n            print(f\"  - {warning['type']}: {warning['message']}\")\n</code></pre>"},{"location":"api-reference/#data-models","title":"\ud83d\udce6 Data Models","text":""},{"location":"api-reference/#ultraorderrequest","title":"UltraOrderRequest","text":"<p>Pydantic model for creating swap orders.</p>"},{"location":"api-reference/#fields","title":"Fields","text":"Field Type Required Description <code>input_mint</code> <code>str</code> \u2705 Input token mint address <code>output_mint</code> <code>str</code> \u2705 Output token mint address <code>amount</code> <code>int</code> \u2705 Amount in smallest unit <code>taker</code> <code>str</code> \u274c Taker's public key <code>referral_account</code> <code>str</code> \u274c Referral account address <code>referral_fee</code> <code>int</code> \u274c Referral fee in basis points"},{"location":"api-reference/#example_5","title":"Example","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nrequest = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    amount=10000000,\n    taker=\"your_public_key\",\n    referral_account=\"referral_address\",\n    referral_fee=50  # 0.5%\n)\n</code></pre>"},{"location":"api-reference/#ultraexecuterequest","title":"UltraExecuteRequest","text":"<p>Pydantic model for executing orders.</p>"},{"location":"api-reference/#fields_1","title":"Fields","text":"Field Type Required Description <code>request_id</code> <code>str</code> \u2705 Request ID from order response <code>signed_transaction</code> <code>str</code> \u2705 Base64-encoded signed transaction"},{"location":"api-reference/#example_6","title":"Example","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_execute_request_model import UltraExecuteRequest\n\nrequest = UltraExecuteRequest(\n    request_id=\"order_request_id\",\n    signed_transaction=\"base64_encoded_transaction\"\n)\n</code></pre>"},{"location":"api-reference/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"api-reference/#client-configuration","title":"Client Configuration","text":"<p>The <code>client_kwargs</code> parameter allows extensive customization:</p>"},{"location":"api-reference/#timeout-settings","title":"Timeout Settings","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"timeout\": 30,  # 30 seconds\n    }\n)\n</code></pre>"},{"location":"api-reference/#proxy-configuration","title":"Proxy Configuration","text":"<pre><code># SOCKS5 Proxy\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"proxies\": {\"https\": \"socks5://user:pass@host:port\"}\n    }\n)\n\n# HTTP Proxy\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"proxies\": {\n            \"http\": \"http://proxy.example.com:8080\",\n            \"https\": \"http://proxy.example.com:8080\"\n        }\n    }\n)\n</code></pre>"},{"location":"api-reference/#custom-headers","title":"Custom Headers","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"headers\": {\n            \"User-Agent\": \"MyApp/1.0\",\n            \"Accept-Language\": \"en-US,en;q=0.9\"\n        }\n    }\n)\n</code></pre>"},{"location":"api-reference/#ssl-configuration","title":"SSL Configuration","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"verify\": True,  # Enable SSL verification\n        # or custom CA bundle\n        \"verify\": \"/path/to/ca-bundle.crt\"\n    }\n)\n</code></pre>"},{"location":"api-reference/#dns-configuration","title":"DNS Configuration","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"resolve\": [\"api.jup.ag:443:1.2.3.4\"],\n        \"dns_servers\": [\"1.1.1.1\", \"1.0.0.1\"]\n    }\n)\n</code></pre>"},{"location":"api-reference/#environment-variables","title":"Environment Variables","text":"Variable Description Format <code>PRIVATE_KEY</code> Solana wallet private key Base58 string or uint8 array <code>JUPITER_API_KEY</code> Jupiter API key String"},{"location":"api-reference/#private-key-formats","title":"Private Key Formats","text":"<pre><code># Base58 format (recommended)\nexport PRIVATE_KEY=\"5KQwr...xyz\"\n\n# Uint8 array format\nexport PRIVATE_KEY=\"[10,229,131,132,213,96,74,22,...]\"\n</code></pre>"},{"location":"api-reference/#error-handling","title":"\ud83d\udea8 Error Handling","text":""},{"location":"api-reference/#common-exceptions","title":"Common Exceptions","text":"Exception Description When It Occurs <code>ValueError</code> Invalid input parameters Invalid private key format, missing required fields <code>requests.HTTPError</code> HTTP errors API errors (4xx, 5xx responses) <code>ConnectionError</code> Network connectivity issues Network problems, proxy issues <code>TimeoutError</code> Request timeout Request took too long to complete"},{"location":"api-reference/#response-status-codes","title":"Response Status Codes","text":"Status Description <code>\"Success\"</code> Operation completed successfully <code>\"Failed\"</code> Operation failed"},{"location":"api-reference/#error-response-structure","title":"Error Response Structure","text":"<p>Failed responses include additional error information:</p> Field Type Description <code>status</code> <code>str</code> Always <code>\"Failed\"</code> <code>error</code> <code>str</code> Human-readable error message <code>code</code> <code>str</code> Error code for programmatic handling"},{"location":"api-reference/#common-error-codes","title":"Common Error Codes","text":"Error Code Description Possible Solutions <code>INSUFFICIENT_BALANCE</code> Not enough tokens for swap Check balance, reduce amount <code>SLIPPAGE_EXCEEDED</code> Price moved beyond tolerance Retry or adjust slippage <code>INVALID_MINT</code> Invalid token mint address Verify mint address <code>RATE_LIMITED</code> Too many requests Add delay between requests"},{"location":"api-reference/#error-handling-example","title":"Error Handling Example","text":"<pre><code>try:\n    response = await client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Failed\":\n        error_code = response.get(\"code\")\n        error_message = response.get(\"error\")\n\n        if error_code == \"INSUFFICIENT_BALANCE\":\n            print(\"\u274c Insufficient balance for swap\")\n        elif error_code == \"SLIPPAGE_EXCEEDED\":\n            print(\"\u274c Price moved too much, try again\")\n        else:\n            print(f\"\u274c Error: {error_message}\")\n    else:\n        print(f\"\u2705 Success: {response['signature']}\")\n\nexcept ValueError as e:\n    print(f\"\u274c Configuration error: {e}\")\nexcept requests.HTTPError as e:\n    print(f\"\u274c API error: {e}\")\nexcept Exception as e:\n    print(f\"\u274c Unexpected error: {e}\")\n</code></pre>"},{"location":"api-reference/#utility-methods","title":"\ud83d\udee0\ufe0f Utility Methods","text":""},{"location":"api-reference/#get_public_key","title":"get_public_key()","text":"<p>Get the public key of the configured wallet.</p>"},{"location":"api-reference/#signature_5","title":"Signature","text":"<pre><code># Async\nasync def get_public_key(self) -&gt; str\n\n# Sync\ndef get_public_key(self) -&gt; str\n</code></pre>"},{"location":"api-reference/#returns_5","title":"Returns","text":"Type Description <code>str</code> Base58-encoded public key"},{"location":"api-reference/#example_7","title":"Example","text":"<pre><code>public_key = await client.get_public_key()\nprint(f\"Wallet address: {public_key}\")\n</code></pre>"},{"location":"api-reference/#close","title":"close()","text":"<p>Close the client and clean up resources.</p>"},{"location":"api-reference/#signature_6","title":"Signature","text":"<pre><code># Async\nasync def close(self) -&gt; None\n\n# Sync\ndef close(self) -&gt; None\n</code></pre>"},{"location":"api-reference/#example_8","title":"Example","text":"<pre><code># Always close clients when done\ntry:\n    # Your operations here\n    pass\nfinally:\n    await client.close()  # For async client\n    # client.close()      # For sync client\n</code></pre>"},{"location":"api-reference/#advanced-usage-patterns","title":"\ud83d\udd0d Advanced Usage Patterns","text":""},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":"<pre><code>import asyncio\n\n# Semaphore for concurrent request limiting\nsemaphore = asyncio.Semaphore(5)  # Max 5 concurrent requests\n\nasync def rate_limited_request(client, mint):\n    async with semaphore:\n        return await client.shield([mint])\n</code></pre>"},{"location":"api-reference/#retry-logic","title":"Retry Logic","text":"<pre><code>import asyncio\n\nasync def retry_operation(operation, max_retries=3, delay=1.0):\n    for attempt in range(max_retries):\n        try:\n            return await operation()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            await asyncio.sleep(delay * (attempt + 1))\n</code></pre>"},{"location":"api-reference/#batch-operations","title":"Batch Operations","text":"<pre><code>async def batch_shield_check(client, mint_lists):\n    tasks = [client.shield(mints) for mints in mint_lists]\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    return results\n</code></pre>"},{"location":"api-reference/#context-manager-pattern","title":"Context Manager Pattern","text":"<pre><code>class ManagedClient:\n    def __init__(self, **kwargs):\n        self.kwargs = kwargs\n        self.client = None\n\n    async def __aenter__(self):\n        self.client = AsyncUltraApiClient(**self.kwargs)\n        return self.client\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.client:\n            await self.client.close()\n\n# Usage\nasync with ManagedClient(api_key=\"your_key\") as client:\n    response = await client.balances(address)\n</code></pre>"},{"location":"api-reference/#performance-tips","title":"\ud83d\udcca Performance Tips","text":""},{"location":"api-reference/#connection-reuse","title":"Connection Reuse","text":"<pre><code># Good: Reuse client for multiple operations\nclient = AsyncUltraApiClient()\ntry:\n    for address in addresses:\n        balances = await client.balances(address)\n        # Process balances\nfinally:\n    await client.close()\n\n# Avoid: Creating new client for each operation\nfor address in addresses:\n    client = AsyncUltraApiClient()\n    balances = await client.balances(address)\n    await client.close()  # Inefficient\n</code></pre>"},{"location":"api-reference/#concurrent-operations","title":"Concurrent Operations","text":"<pre><code># Efficient concurrent processing\nasync def process_addresses(client, addresses):\n    tasks = [client.balances(addr) for addr in addresses]\n    results = await asyncio.gather(*tasks)\n    return results\n</code></pre>"},{"location":"api-reference/#timeout-configuration","title":"Timeout Configuration","text":"<pre><code># Set appropriate timeouts for your use case\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"timeout\": 10,  # Quick operations\n        # \"timeout\": 60,  # For slower operations\n    }\n)\n</code></pre> <p>For more examples and use cases, see the Examples documentation.</p>"},{"location":"examples/","title":"Examples and Use Cases","text":"<p>Real-world examples and patterns for using the Jupiter Python SDK effectively.</p>"},{"location":"examples/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Basic Examples</li> <li>Trading Strategies</li> <li>Portfolio Management</li> <li>Token Analysis</li> <li>Advanced Patterns</li> <li>Error Handling Patterns</li> <li>Performance Optimization</li> </ul>"},{"location":"examples/#basic-examples","title":"\ud83d\ude80 Basic Examples","text":""},{"location":"examples/#simple-token-swap","title":"Simple Token Swap","text":"<p>The most basic use case - swapping one token for another:</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def simple_swap():\n    \"\"\"Swap 0.1 WSOL for USDC\"\"\"\n    client = AsyncUltraApiClient()\n\n    try:\n        # Get wallet address\n        wallet = await client.get_public_key()\n        print(f\"\ud83d\udd0d Using wallet: {wallet}\")\n\n        # Create swap order\n        order = UltraOrderRequest(\n            input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n            output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n            amount=100_000_000,  # 0.1 WSOL\n            taker=wallet\n        )\n\n        # Execute swap\n        result = await client.order_and_execute(order)\n\n        if result.get(\"status\") == \"Success\":\n            print(f\"\u2705 Swap successful!\")\n            print(f\"\ud83d\udccb Transaction: https://solscan.io/tx/{result['signature']}\")\n        else:\n            print(f\"\u274c Swap failed: {result.get('error')}\")\n\n    finally:\n        await client.close()\n\nasyncio.run(simple_swap())\n</code></pre>"},{"location":"examples/#check-multiple-token-balances","title":"Check Multiple Token Balances","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_portfolio():\n    \"\"\"Check balances for multiple tokens\"\"\"\n    client = AsyncUltraApiClient()\n\n    try:\n        wallet = await client.get_public_key()\n        balances = await client.balances(wallet)\n\n        print(f\"\ud83d\udcb0 Portfolio for {wallet[:8]}...\")\n        print(\"=\" * 50)\n\n        total_value = 0\n        for token, details in balances.items():\n            amount = details.get('uiAmount', 0)\n            frozen = details.get('isFrozen', False)\n\n            status_icon = \"\ud83e\uddca\" if frozen else \"\u2705\"\n            print(f\"{status_icon} {token:&lt;8} {amount:&gt;15.6f}\")\n\n        print(\"=\" * 50)\n\n    finally:\n        await client.close()\n\nasyncio.run(check_portfolio())\n</code></pre>"},{"location":"examples/#token-safety-check","title":"Token Safety Check","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def safety_check():\n    \"\"\"Check safety of popular tokens\"\"\"\n    client = AsyncUltraApiClient()\n\n    # Popular Solana tokens\n    popular_tokens = [\n        (\"WSOL\", \"So11111111111111111111111111111111111111112\"),\n        (\"USDC\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n        (\"USDT\", \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\n        (\"BONK\", \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"),\n    ]\n\n    try:\n        mints = [mint for _, mint in popular_tokens]\n        shield_result = await client.shield(mints)\n\n        print(\"\ud83d\udee1\ufe0f Token Safety Report\")\n        print(\"=\" * 40)\n\n        for name, mint in popular_tokens:\n            warnings = shield_result.get(\"warnings\", {}).get(mint, [])\n\n            if warnings:\n                print(f\"\u26a0\ufe0f  {name:&lt;8} - {len(warnings)} warning(s)\")\n                for warning in warnings:\n                    print(f\"   \u2514\u2500 {warning.get('type')}: {warning.get('message')}\")\n            else:\n                print(f\"\u2705 {name:&lt;8} - Safe\")\n\n    finally:\n        await client.close()\n\nasyncio.run(safety_check())\n</code></pre>"},{"location":"examples/#trading-strategies","title":"\ud83d\udcc8 Trading Strategies","text":""},{"location":"examples/#dollar-cost-averaging-dca","title":"Dollar Cost Averaging (DCA)","text":"<pre><code>import asyncio\nfrom datetime import datetime\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass DCABot:\n    def __init__(self, api_key=None):\n        self.client = AsyncUltraApiClient(api_key=api_key)\n\n    async def dca_buy(self, input_mint, output_mint, amount_sol, frequency_hours=24):\n        \"\"\"Execute DCA strategy\"\"\"\n        try:\n            wallet = await self.client.get_public_key()\n\n            # Check current balance\n            balances = await self.client.balances(wallet)\n            sol_balance = balances.get(\"SOL\", {}).get(\"uiAmount\", 0)\n\n            if sol_balance &lt; amount_sol:\n                print(f\"\u274c Insufficient SOL balance: {sol_balance}\")\n                return\n\n            # Create order\n            order = UltraOrderRequest(\n                input_mint=input_mint,\n                output_mint=output_mint,\n                amount=int(amount_sol * 10**9),  # Convert to lamports\n                taker=wallet\n            )\n\n            print(f\"\ud83d\udd04 DCA: Buying {amount_sol} SOL worth of tokens...\")\n            result = await self.client.order_and_execute(order)\n\n            if result.get(\"status\") == \"Success\":\n                print(f\"\u2705 DCA executed successfully!\")\n                print(f\"\ud83d\udccb TX: {result['signature']}\")\n\n                # Log the trade\n                timestamp = datetime.now().isoformat()\n                print(f\"\ud83d\udcc5 {timestamp}: Bought with {amount_sol} SOL\")\n            else:\n                print(f\"\u274c DCA failed: {result.get('error')}\")\n\n        except Exception as e:\n            print(f\"\ud83d\udca5 DCA Error: {e}\")\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def run_dca():\n    bot = DCABot()\n    try:\n        await bot.dca_buy(\n            input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n            output_mint=\"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n            amount_sol=0.01  # Buy with 0.01 SOL\n        )\n    finally:\n        await bot.close()\n\nasyncio.run(run_dca())\n</code></pre>"},{"location":"examples/#arbitrage-scanner","title":"Arbitrage Scanner","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass ArbitrageScanner:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def scan_arbitrage(self, token_pairs, min_profit_bps=50):\n        \"\"\"Scan for arbitrage opportunities\"\"\"\n        opportunities = []\n\n        for input_mint, output_mint in token_pairs:\n            try:\n                # Get quote for 1 SOL\n                test_amount = 1_000_000_000  # 1 SOL\n\n                # Forward trade: input -&gt; output\n                forward_order = UltraOrderRequest(\n                    input_mint=input_mint,\n                    output_mint=output_mint,\n                    amount=test_amount,\n                    taker=await self.client.get_public_key()\n                )\n\n                forward_quote = await self.client.order(forward_order)\n\n                if forward_quote.get(\"status\") == \"Success\":\n                    # Calculate potential profit\n                    # This is simplified - in reality you'd need to parse\n                    # the transaction to get exact output amounts\n                    print(f\"\ud83d\udcca Analyzing {input_mint[:8]}... -&gt; {output_mint[:8]}...\")\n\n                    # You would implement profit calculation logic here\n                    # opportunities.append({...})\n\n            except Exception as e:\n                print(f\"\u274c Error scanning {input_mint[:8]}...: {e}\")\n\n        return opportunities\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def run_arbitrage_scan():\n    scanner = ArbitrageScanner()\n    try:\n        pairs = [\n            (\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),  # WSOL/USDC\n            (\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),  # USDC/USDT\n        ]\n\n        opportunities = await scanner.scan_arbitrage(pairs)\n        print(f\"Found {len(opportunities)} arbitrage opportunities\")\n\n    finally:\n        await scanner.close()\n\nasyncio.run(run_arbitrage_scan())\n</code></pre>"},{"location":"examples/#portfolio-management","title":"\ud83d\udcbc Portfolio Management","text":""},{"location":"examples/#portfolio-rebalancer","title":"Portfolio Rebalancer","text":"<pre><code>import asyncio\nfrom typing import Dict\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass PortfolioRebalancer:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def rebalance_portfolio(self, target_allocations: Dict[str, float]):\n        \"\"\"\n        Rebalance portfolio to target allocations\n\n        Args:\n            target_allocations: {\"SOL\": 0.5, \"USDC\": 0.3, \"BONK\": 0.2}\n        \"\"\"\n        try:\n            wallet = await self.client.get_public_key()\n            balances = await self.client.balances(wallet)\n\n            print(\"\ud83d\udd04 Starting portfolio rebalancing...\")\n            print(\"=\" * 50)\n\n            # Calculate current allocations\n            total_value = 0  # You'd need to fetch USD values\n            current_allocations = {}\n\n            for token, details in balances.items():\n                amount = details.get('uiAmount', 0)\n                # Simplified - you'd need real price data\n                current_allocations[token] = amount\n\n            print(\"\ud83d\udcca Current vs Target Allocations:\")\n            for token, target in target_allocations.items():\n                current = current_allocations.get(token, 0)\n                print(f\"{token:&lt;8} Current: {current:&gt;8.2f}% Target: {target*100:&gt;6.1f}%\")\n\n            # Execute rebalancing trades\n            # This is where you'd implement the actual rebalancing logic\n            print(\"\u2705 Rebalancing completed!\")\n\n        except Exception as e:\n            print(f\"\u274c Rebalancing failed: {e}\")\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def rebalance():\n    rebalancer = PortfolioRebalancer()\n    try:\n        await rebalancer.rebalance_portfolio({\n            \"SOL\": 0.4,\n            \"USDC\": 0.4,\n            \"BONK\": 0.2\n        })\n    finally:\n        await rebalancer.close()\n\nasyncio.run(rebalance())\n</code></pre>"},{"location":"examples/#multi-wallet-portfolio-tracker","title":"Multi-Wallet Portfolio Tracker","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass MultiWalletTracker:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def track_wallets(self, wallet_addresses: List[str]):\n        \"\"\"Track multiple wallets concurrently\"\"\"\n        print(\"\ud83d\udc65 Multi-Wallet Portfolio Tracker\")\n        print(\"=\" * 60)\n\n        # Create tasks for concurrent balance fetching\n        tasks = [\n            self.get_wallet_summary(address)\n            for address in wallet_addresses\n        ]\n\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Aggregate results\n        total_wallets = len(wallet_addresses)\n        successful_wallets = sum(1 for r in results if not isinstance(r, Exception))\n\n        print(f\"\\n\ud83d\udcca Summary: {successful_wallets}/{total_wallets} wallets processed\")\n\n    async def get_wallet_summary(self, address: str):\n        \"\"\"Get summary for a single wallet\"\"\"\n        try:\n            balances = await self.client.balances(address)\n\n            print(f\"\\n\ud83d\udcb0 Wallet: {address[:8]}...{address[-8:]}\")\n            print(\"-\" * 40)\n\n            token_count = len(balances)\n            total_tokens = sum(\n                details.get('uiAmount', 0)\n                for details in balances.values()\n            )\n\n            print(f\"\ud83d\udcc8 Tokens: {token_count}\")\n\n            # Show top holdings\n            sorted_balances = sorted(\n                balances.items(),\n                key=lambda x: x[1].get('uiAmount', 0),\n                reverse=True\n            )\n\n            for token, details in sorted_balances[:5]:  # Top 5\n                amount = details.get('uiAmount', 0)\n                if amount &gt; 0:\n                    print(f\"   {token:&lt;8} {amount:&gt;12.6f}\")\n\n            return {\n                \"address\": address,\n                \"token_count\": token_count,\n                \"balances\": balances\n            }\n\n        except Exception as e:\n            print(f\"\u274c Error fetching {address[:8]}...: {e}\")\n            return e\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def track_multiple_wallets():\n    tracker = MultiWalletTracker()\n    try:\n        # Add your wallet addresses here\n        wallets = [\n            \"YourWalletAddress1...\",\n            \"YourWalletAddress2...\",\n            # Add more wallet addresses\n        ]\n\n        await tracker.track_wallets(wallets)\n\n    finally:\n        await tracker.close()\n\n# asyncio.run(track_multiple_wallets())\n</code></pre>"},{"location":"examples/#token-analysis","title":"\ud83d\udd0d Token Analysis","text":""},{"location":"examples/#token-risk-assessment","title":"Token Risk Assessment","text":"<pre><code>import asyncio\nfrom typing import Dict, List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass TokenAnalyzer:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def analyze_token_list(self, token_list: List[Dict[str, str]]):\n        \"\"\"Analyze a list of tokens for risks\"\"\"\n        print(\"\ud83d\udd0d Token Risk Analysis\")\n        print(\"=\" * 50)\n\n        # Extract mint addresses\n        mints = [token[\"mint\"] for token in token_list]\n\n        # Batch safety check\n        shield_result = await self.client.shield(mints)\n        warnings_dict = shield_result.get(\"warnings\", {})\n\n        # Analyze each token\n        for token in token_list:\n            name = token[\"name\"]\n            mint = token[\"mint\"]\n            warnings = warnings_dict.get(mint, [])\n\n            print(f\"\\n\ud83e\ude99 {name} ({mint[:8]}...)\")\n            print(\"-\" * 30)\n\n            if not warnings:\n                print(\"\u2705 No safety warnings detected\")\n                risk_score = \"LOW\"\n            else:\n                risk_score = self.calculate_risk_score(warnings)\n                print(f\"\u26a0\ufe0f  {len(warnings)} warning(s) detected:\")\n\n                for warning in warnings:\n                    warning_type = warning.get(\"type\", \"Unknown\")\n                    message = warning.get(\"message\", \"No message\")\n                    print(f\"   \u2022 {warning_type}: {message}\")\n\n            print(f\"\ud83c\udfaf Risk Score: {risk_score}\")\n\n    def calculate_risk_score(self, warnings: List[Dict]) -&gt; str:\n        \"\"\"Calculate risk score based on warnings\"\"\"\n        if not warnings:\n            return \"LOW\"\n\n        high_risk_types = [\"rugpull\", \"scam\", \"suspicious\"]\n        medium_risk_types = [\"liquidity\", \"volume\"]\n\n        for warning in warnings:\n            warning_type = warning.get(\"type\", \"\").lower()\n            if any(risk in warning_type for risk in high_risk_types):\n                return \"HIGH\"\n            elif any(risk in warning_type for risk in medium_risk_types):\n                return \"MEDIUM\"\n\n        return \"MEDIUM\" if len(warnings) &gt; 2 else \"LOW\"\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def analyze_tokens():\n    analyzer = TokenAnalyzer()\n    try:\n        tokens_to_analyze = [\n            {\"name\": \"Wrapped SOL\", \"mint\": \"So11111111111111111111111111111111111111112\"},\n            {\"name\": \"USD Coin\", \"mint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"},\n            {\"name\": \"Bonk\", \"mint\": \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"},\n        ]\n\n        await analyzer.analyze_token_list(tokens_to_analyze)\n\n    finally:\n        await analyzer.close()\n\nasyncio.run(analyze_tokens())\n</code></pre>"},{"location":"examples/#market-scanner","title":"Market Scanner","text":"<pre><code>import asyncio\nfrom typing import List, Dict\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass MarketScanner:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def scan_trending_tokens(self, base_mints: List[str]):\n        \"\"\"Scan for trending tokens by volume\"\"\"\n        print(\"\ud83d\udcc8 Market Scanner - Trending Tokens\")\n        print(\"=\" * 50)\n\n        trending_data = []\n\n        for mint in base_mints:\n            try:\n                # Check safety first\n                shield_result = await self.client.shield([mint])\n                warnings = shield_result.get(\"warnings\", {}).get(mint, [])\n\n                safety_status = \"\ud83d\udd34 RISKY\" if warnings else \"\ud83d\udfe2 SAFE\"\n\n                print(f\"\\n\ud83d\udd0d Analyzing {mint[:8]}...\")\n                print(f\"   Safety: {safety_status}\")\n\n                if warnings:\n                    print(f\"   Warnings: {len(warnings)}\")\n                    for warning in warnings[:2]:  # Show first 2 warnings\n                        print(f\"     \u2022 {warning.get('type')}\")\n\n                trending_data.append({\n                    \"mint\": mint,\n                    \"safety_status\": safety_status,\n                    \"warning_count\": len(warnings)\n                })\n\n            except Exception as e:\n                print(f\"\u274c Error analyzing {mint[:8]}...: {e}\")\n\n        # Sort by safety (safe tokens first)\n        trending_data.sort(key=lambda x: x[\"warning_count\"])\n\n        print(f\"\\n\ud83d\udcca Scan Results ({len(trending_data)} tokens):\")\n        print(\"-\" * 40)\n\n        for data in trending_data:\n            mint = data[\"mint\"]\n            status = data[\"safety_status\"]\n            warnings = data[\"warning_count\"]\n            print(f\"{status} {mint[:8]}... ({warnings} warnings)\")\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def scan_market():\n    scanner = MarketScanner()\n    try:\n        # Popular token mints to scan\n        tokens = [\n            \"So11111111111111111111111111111111111111112\",  # WSOL\n            \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n            \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",  # USDT\n            \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n        ]\n\n        await scanner.scan_trending_tokens(tokens)\n\n    finally:\n        await scanner.close()\n\nasyncio.run(scan_market())\n</code></pre>"},{"location":"examples/#advanced-patterns","title":"\u26a1 Advanced Patterns","text":""},{"location":"examples/#connection-pool-manager","title":"Connection Pool Manager","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass ConnectionPoolManager:\n    def __init__(self, pool_size: int = 5):\n        self.pool_size = pool_size\n        self.clients: List[AsyncUltraApiClient] = []\n        self.current_index = 0\n\n    async def initialize(self):\n        \"\"\"Initialize connection pool\"\"\"\n        print(f\"\ud83d\udd17 Initializing connection pool (size: {self.pool_size})\")\n\n        for i in range(self.pool_size):\n            client = AsyncUltraApiClient()\n            self.clients.append(client)\n\n    def get_client(self) -&gt; AsyncUltraApiClient:\n        \"\"\"Get next client from pool (round-robin)\"\"\"\n        client = self.clients[self.current_index]\n        self.current_index = (self.current_index + 1) % self.pool_size\n        return client\n\n    async def batch_operation(self, addresses: List[str]):\n        \"\"\"Execute batch operations using connection pool\"\"\"\n        semaphore = asyncio.Semaphore(self.pool_size)\n\n        async def process_address(address):\n            async with semaphore:\n                client = self.get_client()\n                try:\n                    return await client.balances(address)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n        tasks = [process_address(addr) for addr in addresses]\n        results = await asyncio.gather(*tasks)\n        return results\n\n    async def close_all(self):\n        \"\"\"Close all connections in pool\"\"\"\n        print(\"\ud83d\udd0c Closing connection pool...\")\n        for client in self.clients:\n            await client.close()\n\n# Usage\nasync def use_connection_pool():\n    pool = ConnectionPoolManager(pool_size=3)\n    try:\n        await pool.initialize()\n\n        # Simulate batch processing\n        addresses = [\n            \"11111111111111111111111111111111\",  # Example addresses\n            \"22222222222222222222222222222222\",\n            \"33333333333333333333333333333333\",\n        ]\n\n        results = await pool.batch_operation(addresses)\n        print(f\"\u2705 Processed {len(results)} addresses\")\n\n    finally:\n        await pool.close_all()\n\n# asyncio.run(use_connection_pool())\n</code></pre>"},{"location":"examples/#rate-limited-trading-bot","title":"Rate Limited Trading Bot","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\nfrom collections import deque\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass RateLimitedBot:\n    def __init__(self, max_requests_per_minute: int = 60):\n        self.client = AsyncUltraApiClient()\n        self.max_requests = max_requests_per_minute\n        self.request_times = deque()\n\n    async def rate_limited_request(self, operation):\n        \"\"\"Execute operation with rate limiting\"\"\"\n        now = datetime.now()\n\n        # Remove old requests (older than 1 minute)\n        while self.request_times and self.request_times[0] &lt; now - timedelta(minutes=1):\n            self.request_times.popleft()\n\n        # Check if we're at the limit\n        if len(self.request_times) &gt;= self.max_requests:\n            sleep_time = 60 - (now - self.request_times[0]).total_seconds()\n            if sleep_time &gt; 0:\n                print(f\"\u23f3 Rate limit reached, sleeping for {sleep_time:.1f}s\")\n                await asyncio.sleep(sleep_time)\n\n        # Record this request\n        self.request_times.append(now)\n\n        # Execute the operation\n        return await operation()\n\n    async def trading_loop(self, trading_pairs: list):\n        \"\"\"Main trading loop with rate limiting\"\"\"\n        print(\"\ud83e\udd16 Starting rate-limited trading bot...\")\n\n        while True:\n            try:\n                for pair in trading_pairs:\n                    input_mint, output_mint = pair\n\n                    # Rate-limited balance check\n                    wallet = await self.rate_limited_request(\n                        lambda: self.client.get_public_key()\n                    )\n\n                    balances = await self.rate_limited_request(\n                        lambda: self.client.balances(wallet)\n                    )\n\n                    print(f\"\ud83d\udcca Checked balances for {wallet[:8]}...\")\n\n                    # Add your trading logic here\n\n                    # Sleep between pairs\n                    await asyncio.sleep(5)\n\n                # Sleep between trading cycles\n                await asyncio.sleep(60)\n\n            except KeyboardInterrupt:\n                print(\"\ud83d\uded1 Bot stopped by user\")\n                break\n            except Exception as e:\n                print(f\"\u274c Trading loop error: {e}\")\n                await asyncio.sleep(30)  # Wait before retrying\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def run_trading_bot():\n    bot = RateLimitedBot(max_requests_per_minute=30)\n    try:\n        pairs = [\n            (\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n        ]\n\n        await bot.trading_loop(pairs)\n\n    finally:\n        await bot.close()\n\n# asyncio.run(run_trading_bot())\n</code></pre>"},{"location":"examples/#error-handling-patterns","title":"\ud83d\udea8 Error Handling Patterns","text":""},{"location":"examples/#comprehensive-error-handler","title":"Comprehensive Error Handler","text":"<pre><code>import asyncio\nimport logging\nfrom typing import Any, Callable\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass ErrorHandler:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n        self.setup_logging()\n\n    def setup_logging(self):\n        \"\"\"Setup logging for error tracking\"\"\"\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[\n                logging.FileHandler('jupiter_bot.log'),\n                logging.StreamHandler()\n            ]\n        )\n        self.logger = logging.getLogger(__name__)\n\n    async def safe_execute(self, operation: Callable, *args, **kwargs) -&gt; Any:\n        \"\"\"Execute operation with comprehensive error handling\"\"\"\n        try:\n            result = await operation(*args, **kwargs)\n\n            # Check if result indicates failure\n            if isinstance(result, dict) and result.get(\"status\") == \"Failed\":\n                error_code = result.get(\"code\")\n                error_message = result.get(\"error\")\n\n                self.logger.error(f\"API Error [{error_code}]: {error_message}\")\n\n                # Handle specific error codes\n                if error_code == \"INSUFFICIENT_BALANCE\":\n                    self.logger.warning(\"Insufficient balance - stopping operations\")\n                    return None\n                elif error_code == \"SLIPPAGE_EXCEEDED\":\n                    self.logger.info(\"Slippage exceeded - retrying with higher tolerance\")\n                    # Could implement retry logic here\n                    return None\n                elif error_code == \"RATE_LIMITED\":\n                    self.logger.warning(\"Rate limited - backing off\")\n                    await asyncio.sleep(60)\n                    return None\n\n            return result\n\n        except ConnectionError as e:\n            self.logger.error(f\"Connection error: {e}\")\n            self.logger.info(\"Retrying in 30 seconds...\")\n            await asyncio.sleep(30)\n            return None\n\n        except TimeoutError as e:\n            self.logger.error(f\"Timeout error: {e}\")\n            self.logger.info(\"Operation timed out - retrying...\")\n            return None\n\n        except ValueError as e:\n            self.logger.error(f\"Configuration error: {e}\")\n            self.logger.critical(\"Check your configuration and private key\")\n            raise  # Don't continue with invalid config\n\n        except Exception as e:\n            self.logger.error(f\"Unexpected error: {e}\")\n            self.logger.info(\"Continuing with next operation...\")\n            return None\n\n    async def monitor_operations(self):\n        \"\"\"Monitor and log various operations\"\"\"\n        operations = [\n            (\"Get Public Key\", self.client.get_public_key),\n            (\"Check Balances\", self.client.balances, \"wallet_address_here\"),\n            (\"Shield Check\", self.client.shield, [\"So11111111111111111111111111111111111111112\"]),\n        ]\n\n        for name, operation, *args in operations:\n            self.logger.info(f\"Executing: {name}\")\n            result = await self.safe_execute(operation, *args)\n\n            if result is not None:\n                self.logger.info(f\"\u2705 {name} completed successfully\")\n            else:\n                self.logger.warning(f\"\u274c {name} failed or returned None\")\n\n            await asyncio.sleep(2)  # Small delay between operations\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def run_error_handling_demo():\n    handler = ErrorHandler()\n    try:\n        await handler.monitor_operations()\n    finally:\n        await handler.close()\n\n# asyncio.run(run_error_handling_demo())\n</code></pre>"},{"location":"examples/#retry-mechanism","title":"Retry Mechanism","text":"<pre><code>import asyncio\nimport random\nfrom typing import Any, Callable\n\nasync def exponential_backoff_retry(\n    operation: Callable,\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 60.0,\n    jitter: bool = True\n) -&gt; Any:\n    \"\"\"\n    Retry operation with exponential backoff\n\n    Args:\n        operation: Async function to retry\n        max_retries: Maximum number of retry attempts\n        base_delay: Base delay in seconds\n        max_delay: Maximum delay in seconds\n        jitter: Add random jitter to prevent thundering herd\n    \"\"\"\n    last_exception = None\n\n    for attempt in range(max_retries + 1):\n        try:\n            return await operation()\n\n        except Exception as e:\n            last_exception = e\n\n            if attempt == max_retries:\n                raise last_exception\n\n            # Calculate delay with exponential backoff\n            delay = min(base_delay * (2 ** attempt), max_delay)\n\n            # Add jitter\n            if jitter:\n                delay *= (0.5 + random.random() * 0.5)\n\n            print(f\"\u274c Attempt {attempt + 1} failed: {e}\")\n            print(f\"\u23f3 Retrying in {delay:.1f} seconds...\")\n\n            await asyncio.sleep(delay)\n\n    raise last_exception\n\n# Usage example\nasync def retry_example():\n    from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\n    client = AsyncUltraApiClient()\n    try:\n        # Wrap any operation with retry logic\n        balances = await exponential_backoff_retry(\n            lambda: client.balances(\"wallet_address_here\"),\n            max_retries=3\n        )\n        print(f\"\u2705 Got balances: {balances}\")\n\n    finally:\n        await client.close()\n\n# asyncio.run(retry_example())\n</code></pre>"},{"location":"examples/#performance-optimization","title":"\ud83d\ude80 Performance Optimization","text":""},{"location":"examples/#concurrent-processing","title":"Concurrent Processing","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass PerformanceOptimizer:\n    def __init__(self, max_concurrent: int = 10):\n        self.client = AsyncUltraApiClient()\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def concurrent_balance_check(self, addresses: List[str]):\n        \"\"\"Check balances for multiple addresses concurrently\"\"\"\n        async def check_single_balance(address):\n            async with self.semaphore:\n                try:\n                    return {\n                        \"address\": address,\n                        \"balances\": await self.client.balances(address),\n                        \"status\": \"success\"\n                    }\n                except Exception as e:\n                    return {\n                        \"address\": address,\n                        \"error\": str(e),\n                        \"status\": \"error\"\n                    }\n\n        print(f\"\ud83d\ude80 Checking {len(addresses)} addresses concurrently...\")\n        start_time = asyncio.get_event_loop().time()\n\n        tasks = [check_single_balance(addr) for addr in addresses]\n        results = await asyncio.gather(*tasks)\n\n        end_time = asyncio.get_event_loop().time()\n        duration = end_time - start_time\n\n        successful = sum(1 for r in results if r[\"status\"] == \"success\")\n\n        print(f\"\u2705 Completed in {duration:.2f}s\")\n        print(f\"\ud83d\udcca Success rate: {successful}/{len(addresses)} ({successful/len(addresses)*100:.1f}%)\")\n\n        return results\n\n    async def batch_shield_check(self, mint_batches: List[List[str]]):\n        \"\"\"Check token safety in batches\"\"\"\n        async def check_batch(batch):\n            async with self.semaphore:\n                try:\n                    return await self.client.shield(batch)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n        print(f\"\ud83d\udee1\ufe0f  Processing {len(mint_batches)} shield batches...\")\n\n        tasks = [check_batch(batch) for batch in mint_batches]\n        results = await asyncio.gather(*tasks)\n\n        return results\n\n    async def close(self):\n        await self.client.close()\n\n# Usage\nasync def performance_demo():\n    optimizer = PerformanceOptimizer(max_concurrent=5)\n\n    try:\n        # Demo addresses (replace with real ones)\n        addresses = [\n            \"11111111111111111111111111111111\",\n            \"22222222222222222222222222222222\",\n            \"33333333333333333333333333333333\",\n            # Add more addresses\n        ]\n\n        # Concurrent balance checking\n        balance_results = await optimizer.concurrent_balance_check(addresses)\n\n        # Batch shield checking\n        mint_batches = [\n            [\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"],\n            [\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"],\n        ]\n\n        shield_results = await optimizer.batch_shield_check(mint_batches)\n\n        print(\"\ud83c\udfaf Performance optimization demo completed!\")\n\n    finally:\n        await optimizer.close()\n\n# asyncio.run(performance_demo())\n</code></pre> <p>These examples demonstrate real-world usage patterns and best practices for the Jupiter Python SDK. Each example is complete and can be adapted to your specific use case. Remember to:</p> <ol> <li>Always handle errors gracefully</li> <li>Use proper rate limiting</li> <li>Close clients when done</li> <li>Implement logging for production use</li> <li>Test with small amounts first</li> </ol> <p>For more detailed API documentation, see the API Reference.</p>"},{"location":"getting-started/","title":"Getting Started with Jupiter Python SDK","text":"<p>This guide will help you get up and running with the Jupiter Python SDK in minutes.</p>"},{"location":"getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.9+ installed on your system</li> <li>A Solana wallet with some SOL for transaction fees</li> <li>Your wallet's private key (we'll show you how to set this up securely)</li> </ul>"},{"location":"getting-started/#installation","title":"\ud83d\udee0\ufe0f Installation","text":""},{"location":"getting-started/#option-1-using-uv-recommended","title":"Option 1: Using uv (Recommended)","text":"<p>First, install uv if you haven't already:</p> <pre><code># Install pyjupiter\nuv add pyjupiter\n</code></pre>"},{"location":"getting-started/#environment-setup","title":"\ud83d\udd11 Environment Setup","text":""},{"location":"getting-started/#1-set-your-private-key","title":"1. Set Your Private Key","text":"<p>You need to set your Solana wallet's private key as an environment variable. The SDK supports two formats:</p>"},{"location":"getting-started/#base58-format-recommended","title":"Base58 Format (Recommended)","text":"<pre><code># Export your private key (Base58 format)\nexport PRIVATE_KEY=\"your_base58_private_key_here\"\n</code></pre>"},{"location":"getting-started/#uint8-array-format","title":"Uint8 Array Format","text":"<pre><code># Or as a uint8 array\nexport PRIVATE_KEY=\"[10,229,131,132,213,96,74,22,...]\"\n</code></pre>"},{"location":"getting-started/#2-optional-get-a-jupiter-api-key","title":"2. Optional: Get a Jupiter API Key","text":"<p>For enhanced rate limits and features, get an API key from Jupiter Portal:</p> <pre><code>export JUPITER_API_KEY=\"your_api_key_here\"\n</code></pre>"},{"location":"getting-started/#3-create-a-env-file-optional","title":"3. Create a .env File (Optional)","text":"<p>For development, you can create a <code>.env</code> file:</p> <pre><code>PRIVATE_KEY=your_base58_private_key_here\nJUPITER_API_KEY=your_api_key_here\n</code></pre>"},{"location":"getting-started/#your-first-swap","title":"\ud83d\ude80 Your First Swap","text":"<p>Let's start with a simple token swap example:</p>"},{"location":"getting-started/#async-example-recommended","title":"Async Example (Recommended)","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def main():\n    # Initialize the client\n    client = AsyncUltraApiClient()\n\n    print(\"\ud83d\udd0d Getting wallet address...\")\n    wallet_address = await client.get_public_key()\n    print(f\"\ud83d\udccd Wallet: {wallet_address}\")\n\n    # Create a swap order: 0.01 WSOL \u2192 USDC\n    order_request = UltraOrderRequest(\n        input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n        output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        amount=10000000,  # 0.01 WSOL (in lamports)\n        taker=wallet_address,\n    )\n\n    try:\n        print(\"\ud83d\udd04 Executing swap...\")\n        response = await client.order_and_execute(order_request)\n\n        if response.get(\"status\") == \"Success\":\n            signature = response[\"signature\"]\n            print(f\"\u2705 Swap successful!\")\n            print(f\"\ud83d\udd17 Transaction: https://solscan.io/tx/{signature}\")\n        else:\n            print(f\"\u274c Swap failed: {response.get('error')}\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 Error: {e}\")\n    finally:\n        await client.close()\n\n# Run the async function\nasyncio.run(main())\n</code></pre>"},{"location":"getting-started/#sync-example","title":"Sync Example","text":"<pre><code>from pyjupiter.clients.ultra_api_client import UltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\n# Initialize the sync client\nclient = UltraApiClient()\n\nprint(\"\ud83d\udd0d Getting wallet address...\")\nwallet_address = client.get_public_key()\nprint(f\"\ud83d\udccd Wallet: {wallet_address}\")\n\n# Create a swap order\norder_request = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n    amount=10000000,  # 0.01 WSOL\n    taker=wallet_address,\n)\n\ntry:\n    print(\"\ud83d\udd04 Executing swap...\")\n    response = client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Success\":\n        signature = response[\"signature\"]\n        print(f\"\u2705 Swap successful!\")\n        print(f\"\ud83d\udd17 Transaction: https://solscan.io/tx/{signature}\")\n    else:\n        print(f\"\u274c Swap failed: {response.get('error')}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udca5 Error: {e}\")\nfinally:\n    client.close()\n</code></pre>"},{"location":"getting-started/#check-your-balances","title":"\ud83d\udcca Check Your Balances","text":"<p>Before making swaps, it's useful to check your token balances:</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_balances():\n    client = AsyncUltraApiClient()\n\n    try:\n        # Get your wallet address\n        address = await client.get_public_key()\n        print(f\"\ud83d\udccd Checking balances for: {address}\")\n\n        # Fetch balances\n        balances = await client.balances(address)\n\n        print(\"\\n\ud83d\udcb0 Token Balances:\")\n        print(\"-\" * 40)\n\n        for token, details in balances.items():\n            amount = details.get('uiAmount', 0)\n            frozen = details.get('isFrozen', False)\n            status = \"\ud83e\uddca Frozen\" if frozen else \"\u2705 Active\"\n            print(f\"{token:&lt;8} {amount:&gt;12.6f} {status}\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 Error: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(check_balances())\n</code></pre>"},{"location":"getting-started/#check-token-safety","title":"\ud83d\udee1\ufe0f Check Token Safety","text":"<p>Always verify token safety before trading:</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_token_safety():\n    client = AsyncUltraApiClient()\n\n    # Tokens to check\n    tokens = [\n        \"So11111111111111111111111111111111111111112\",  # WSOL\n        \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n    ]\n\n    try:\n        print(\"\ud83d\udee1\ufe0f Checking token safety...\")\n        shield_response = await client.shield(tokens)\n\n        for mint in tokens:\n            warnings = shield_response.get(\"warnings\", {}).get(mint, [])\n\n            if warnings:\n                print(f\"\u26a0\ufe0f  {mint[:8]}... has warnings:\")\n                for warning in warnings:\n                    print(f\"   - {warning.get('type')}: {warning.get('message')}\")\n            else:\n                print(f\"\u2705 {mint[:8]}... appears safe\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 Error: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(check_token_safety())\n</code></pre>"},{"location":"getting-started/#client-configuration","title":"\u2699\ufe0f Client Configuration","text":""},{"location":"getting-started/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\n# Default configuration\nclient = AsyncUltraApiClient()\n\n# With API key\nclient = AsyncUltraApiClient(api_key=\"your_api_key\")\n\n# Custom private key environment variable\nclient = AsyncUltraApiClient(private_key_env_var=\"MY_PRIVATE_KEY\")\n</code></pre>"},{"location":"getting-started/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code># Custom client settings\nclient = AsyncUltraApiClient(\n    api_key=\"your_api_key\",\n    client_kwargs={\n        \"timeout\": 30,  # 30 seconds timeout\n        \"verify\": True,  # SSL verification\n        \"headers\": {\n            \"User-Agent\": \"MyApp/1.0\",\n        }\n    }\n)\n</code></pre>"},{"location":"getting-started/#using-proxies","title":"Using Proxies","text":"<pre><code># SOCKS5 proxy\nproxies = {\"https\": \"socks5://user:pass@host:port\"}\nclient = AsyncUltraApiClient(client_kwargs={\"proxies\": proxies})\n\n# HTTP proxy\nproxies = {\n    \"http\": \"http://proxy.example.com:8080\",\n    \"https\": \"http://proxy.example.com:8080\",\n}\nclient = AsyncUltraApiClient(client_kwargs={\"proxies\": proxies})\n</code></pre>"},{"location":"getting-started/#common-token-addresses","title":"\ud83d\udd0d Common Token Addresses","text":"<p>Here are some popular Solana token mint addresses for testing:</p> Token Symbol Mint Address Decimals Wrapped SOL WSOL <code>So11111111111111111111111111111111111111112</code> 9 USD Coin USDC <code>EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v</code> 6 Tether USDT <code>Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB</code> 6 Bonk BONK <code>DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263</code> 5"},{"location":"getting-started/#best-practices","title":"\ud83d\udca1 Best Practices","text":""},{"location":"getting-started/#1-always-close-clients","title":"1. Always Close Clients","text":"<pre><code># Using try/finally\nclient = AsyncUltraApiClient()\ntry:\n    # Your code here\n    pass\nfinally:\n    await client.close()\n\n# Or using context manager (if available)\nasync with AsyncUltraApiClient() as client:\n    # Your code here\n    pass\n</code></pre>"},{"location":"getting-started/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<pre><code>try:\n    response = await client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Failed\":\n        error_code = response.get(\"code\")\n        if error_code == \"INSUFFICIENT_BALANCE\":\n            print(\"\u274c Insufficient balance for swap\")\n        elif error_code == \"SLIPPAGE_EXCEEDED\":\n            print(\"\u274c Slippage tolerance exceeded\")\n        else:\n            print(f\"\u274c Transaction failed: {response.get('error')}\")\n    else:\n        print(f\"\u2705 Success: {response['signature']}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udca5 Unexpected error: {e}\")\n</code></pre>"},{"location":"getting-started/#3-calculate-amounts-correctly","title":"3. Calculate Amounts Correctly","text":"<pre><code># Always work with the smallest unit\nsol_amount = 0.01  # SOL\nlamports = int(sol_amount * 10**9)  # Convert to lamports\n\nusdc_amount = 10.0  # USDC\nusdc_units = int(usdc_amount * 10**6)  # USDC has 6 decimals\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"Problem Solution <code>ValueError: Invalid private key format</code> Check your private key format (Base58 or array) <code>ConnectionError</code> Check your internet connection and proxy settings <code>Insufficient balance</code> Ensure you have enough tokens and SOL for fees <code>Slippage exceeded</code> Market moved too much; try again or adjust slippage"},{"location":"getting-started/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Check if your environment variable is set\necho $PRIVATE_KEY\n\n# If empty, set it again\nexport PRIVATE_KEY=\"your_private_key_here\"\n</code></pre>"},{"location":"getting-started/#network-issues","title":"Network Issues","text":"<pre><code># Test basic connectivity\nimport asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def test_connection():\n    client = AsyncUltraApiClient()\n    try:\n        address = await client.get_public_key()\n        print(f\"\u2705 Connection successful! Wallet: {address}\")\n    except Exception as e:\n        print(f\"\u274c Connection failed: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(test_connection())\n</code></pre>"},{"location":"getting-started/#next-steps","title":"\ud83d\udcda Next Steps","text":"<p>Now that you have the basics down, explore more advanced features:</p> <ol> <li>API Reference - Complete method documentation</li> <li>Examples - Real-world use cases and patterns</li> <li>Ultra API Docs - Official Jupiter documentation</li> </ol>"},{"location":"getting-started/#congratulations","title":"\ud83c\udf89 Congratulations!","text":"<p>You've successfully set up Jupiter Python SDK and made your first token swap. You're now ready to build sophisticated DeFi applications on Solana!</p>"},{"location":"zh/","title":"Jupiter Python SDK","text":"<p>\u57fa\u4e8e <code>curl_cffi</code> \u6784\u5efa\u7684\u9ad8\u6027\u80fd\u3001\u5f02\u6b65\u4f18\u5148\u7684 Python SDK\uff0c\u7528\u4e8e\u4e0e Jupiter Ultra API \u65e0\u7f1d\u4ea4\u4e92\uff0c\u63d0\u4f9b\u6700\u5927\u7684\u901f\u5ea6\u548c\u7075\u6d3b\u6027\u3002</p> <p>\u4f7f\u7528 Ultra API\uff0c\u60a8\u65e0\u9700\u7ba1\u7406\u6216\u8fde\u63a5\u4efb\u4f55 RPC \u7aef\u70b9\uff0c\u4e5f\u65e0\u9700\u5904\u7406\u590d\u6742\u7684\u914d\u7f6e\u3002\u4ece\u83b7\u53d6\u62a5\u4ef7\u5230\u4ea4\u6613\u6267\u884c\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u76f4\u63a5\u901a\u8fc7\u5f3a\u5927\u7684 API \u5b8c\u6210\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5e38\u8bf4\u7684\uff1a\"RPC \u662f\u7ed9\u83dc\u9e1f\u7528\u7684\u3002\"</p>"},{"location":"zh/#_1","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"\u7279\u6027 \u63cf\u8ff0 \u26a1 \u9ad8\u6027\u80fd \u57fa\u4e8e <code>curl_cffi</code> \u6784\u5efa\uff0c\u63d0\u4f9b\u6781\u901f HTTP \u8bf7\u6c42 \ud83d\udd04 \u5f02\u6b65/\u540c\u6b65\u652f\u6301 \u63d0\u4f9b\u5f02\u6b65\u548c\u540c\u6b65\u5ba2\u6237\u7aef \ud83d\udee1\ufe0f \u4ee3\u5e01\u5b89\u5168 \u5185\u7f6e\u76fe\u724c API\uff0c\u63d0\u4f9b\u4ee3\u5e01\u5b89\u5168\u8b66\u544a \ud83d\udcb0 \u4f59\u989d\u67e5\u8be2 \u8f7b\u677e\u83b7\u53d6\u4efb\u4f55 Solana \u5730\u5740\u7684\u4f59\u989d \ud83d\udd27 \u9ad8\u7ea7\u914d\u7f6e \u652f\u6301\u4ee3\u7406\u3001\u81ea\u5b9a\u4e49 DNS \u7b49 \ud83d\udce6 \u7c7b\u578b\u5b89\u5168 \u4f7f\u7528 Pydantic \u6a21\u578b\u63d0\u4f9b\u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a \ud83c\udfaf \u96f6\u914d\u7f6e \u5f00\u7bb1\u5373\u7528\uff0c\u6700\u5c0f\u5316\u8bbe\u7f6e"},{"location":"zh/#jupiter-python-sdk_1","title":"\ud83c\udf1f Jupiter Python SDK \u7684\u72ec\u7279\u4e4b\u5904","text":"<ul> <li>Ultra API \u96c6\u6210\uff1a\u76f4\u63a5\u8bbf\u95ee Jupiter \u5f3a\u5927\u7684\u4ea4\u6613\u57fa\u7840\u8bbe\u65bd</li> <li>\u65e0\u9700 RPC \u7ba1\u7406\uff1a\u5fd8\u8bb0 RPC \u7aef\u70b9\u3001\u8282\u70b9\u7ba1\u7406\u548c\u590d\u6742\u914d\u7f6e</li> <li>\u5f00\u53d1\u8005\u53cb\u597d\uff1a\u76f4\u89c2\u7684 API \u8bbe\u8ba1\uff0c\u5168\u9762\u7684\u9519\u8bef\u5904\u7406</li> <li>\u751f\u4ea7\u5c31\u7eea\uff1a\u4e13\u4e3a\u9ad8\u9891\u4ea4\u6613\u548c\u4f01\u4e1a\u5e94\u7528\u800c\u6784\u5efa</li> <li>\u7075\u6d3b\u6027\uff1a\u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u7f16\u7a0b\u6a21\u5f0f</li> </ul>"},{"location":"zh/#_2","title":"\ud83d\udccb \u73af\u5883\u8981\u6c42","text":"<ul> <li>Python 3.9 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>Solana \u94b1\u5305\u79c1\u94a5\uff08\u7528\u4e8e\u4ea4\u6613\u7b7e\u540d\uff09</li> </ul>"},{"location":"zh/#_3","title":"\ud83c\udfaf \u4f7f\u7528\u573a\u666f","text":"<ul> <li>DeFi \u5e94\u7528\uff1a\u6784\u5efa\u5177\u6709\u4ee3\u5e01\u4ea4\u6362\u529f\u80fd\u7684\u590d\u6742 DeFi \u5e94\u7528</li> <li>\u4ea4\u6613\u673a\u5668\u4eba\uff1a\u5728 Solana \u4e0a\u521b\u5efa\u81ea\u52a8\u5316\u4ea4\u6613\u7b56\u7565</li> <li>\u6295\u8d44\u7ec4\u5408\u7ba1\u7406\uff1a\u8de8\u591a\u4e2a\u94b1\u5305\u8ddf\u8e2a\u548c\u7ba1\u7406\u4ee3\u5e01\u4f59\u989d</li> <li>\u4ee3\u5e01\u5206\u6790\uff1a\u5206\u6790\u4ee3\u5e01\u5b89\u5168\u6027\u548c\u5e02\u573a\u6570\u636e</li> <li>\u5957\u5229\u7cfb\u7edf\uff1a\u4f7f\u7528 Jupiter \u7684\u6d41\u52a8\u6027\u6784\u5efa\u5957\u5229\u673a\u5668\u4eba</li> </ul>"},{"location":"zh/#_4","title":"\ud83c\udfd7\ufe0f \u67b6\u6784\u56fe","text":"<pre><code>graph TB\n    A[Python \u5e94\u7528\u7a0b\u5e8f] --&gt; B[Jupiter Python SDK]\n    B --&gt; C[Jupiter Ultra API]\n    C --&gt; D[Solana \u533a\u5757\u94fe]\n\n    B --&gt; E[AsyncUltraApiClient]\n    B --&gt; F[UltraApiClient]\n\n    E --&gt; G[order]\n    E --&gt; H[execute]\n    E --&gt; I[balances]\n    E --&gt; J[shield]</code></pre>"},{"location":"zh/#_5","title":"\ud83d\udcda \u6587\u6863\u5bfc\u822a","text":"\u7ae0\u8282 \u63cf\u8ff0 \u5feb\u901f\u5f00\u59cb \u5b89\u88c5\u3001\u8bbe\u7f6e\u548c\u60a8\u7684\u7b2c\u4e00\u6b21\u4ea4\u6362 API \u53c2\u8003 \u5b8c\u6574\u7684 API \u6587\u6863\u548c\u793a\u4f8b \u4ee3\u7801\u793a\u4f8b \u771f\u5b9e\u4e16\u754c\u7684\u4ee3\u7801\u793a\u4f8b\u548c\u7528\u4f8b"},{"location":"zh/#_6","title":"\ud83d\ude80 \u5feb\u901f\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def main():\n    # \u521d\u59cb\u5316\u5f02\u6b65\u5ba2\u6237\u7aef\n    client = AsyncUltraApiClient()\n\n    # \u521b\u5efa\u4ea4\u6362\u8ba2\u5355\n    order_request = UltraOrderRequest(\n        input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n        output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        amount=10000000,  # 0.01 WSOL\n        taker=await client.get_public_key(),\n    )\n\n    try:\n        # \u6267\u884c\u4ea4\u6362\n        response = await client.order_and_execute(order_request)\n        print(f\"\u2705 \u4ea4\u6613\u94fe\u63a5: https://solscan.io/tx/{response['signature']}\")\n    finally:\n        await client.close()\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/#_7","title":"\ud83e\udd1d \u793e\u533a\u4e0e\u652f\u6301","text":"<ul> <li>GitHub\uff1apyjupiter \u4ed3\u5e93</li> <li>Discord\uff1aJupiter \u793e\u533a</li> <li>\u6587\u6863\uff1aUltra API \u6587\u6863</li> <li>API \u95e8\u6237\uff1a\u83b7\u53d6\u60a8\u7684 API \u5bc6\u94a5</li> </ul>"},{"location":"zh/#_8","title":"\ud83d\udcdd \u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1 - \u8be6\u60c5\u8bf7\u53c2\u9605 LICENSE \u6587\u4ef6\u3002</p> <p>\u51c6\u5907\u5f00\u59cb\u4e86\u5417\uff1f \u67e5\u770b\u6211\u4eec\u7684\u5feb\u901f\u5f00\u59cb\u6307\u5357\uff0c\u5f00\u59cb\u4f7f\u7528 Jupiter Python SDK \u6784\u5efa\u5e94\u7528\uff01</p>"},{"location":"zh/api-reference/","title":"API \u53c2\u8003\u6587\u6863","text":"<p>Jupiter Python SDK \u7684\u5b8c\u6574\u53c2\u8003\u6587\u6863\u3002</p>"},{"location":"zh/api-reference/#_1","title":"\ud83d\udcda \u76ee\u5f55","text":"<ul> <li>\u5ba2\u6237\u7aef\u7c7b</li> <li>\u6838\u5fc3\u65b9\u6cd5</li> <li>\u6570\u636e\u6a21\u578b</li> <li>\u914d\u7f6e\u9009\u9879</li> <li>\u9519\u8bef\u5904\u7406</li> <li>\u5b9e\u7528\u65b9\u6cd5</li> </ul>"},{"location":"zh/api-reference/#_2","title":"\ud83c\udfdb\ufe0f \u5ba2\u6237\u7aef\u7c7b","text":""},{"location":"zh/api-reference/#asyncultraapiclient","title":"AsyncUltraApiClient","text":"<p>\u7528\u4e8e Jupiter Ultra API \u4ea4\u4e92\u7684\u4e3b\u8981\u5f02\u6b65\u5ba2\u6237\u7aef\u3002</p> <pre><code>from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclient = AsyncUltraApiClient(\n    api_key=\"\u53ef\u9009\u7684API\u5bc6\u94a5\",\n    private_key_env_var=\"PRIVATE_KEY\",\n    client_kwargs={}\n)\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u53c2\u6570\uff1a</p> \u53c2\u6570 \u7c7b\u578b \u9ed8\u8ba4\u503c \u63cf\u8ff0 <code>api_key</code> <code>str \\| None</code> <code>None</code> Jupiter API \u5bc6\u94a5\u7528\u4e8e\u589e\u5f3a\u529f\u80fd <code>private_key_env_var</code> <code>str</code> <code>\"PRIVATE_KEY\"</code> \u79c1\u94a5\u7684\u73af\u5883\u53d8\u91cf\u540d <code>client_kwargs</code> <code>dict</code> <code>{}</code> \u9644\u52a0\u7684 curl_cffi \u5ba2\u6237\u7aef\u914d\u7f6e"},{"location":"zh/api-reference/#ultraapiclient","title":"UltraApiClient","text":"<p>\u7528\u4e8e Jupiter Ultra API \u4ea4\u4e92\u7684\u540c\u6b65\u5ba2\u6237\u7aef\u3002</p> <pre><code>from pyjupiter.clients.ultra_api_client import UltraApiClient\n\nclient = UltraApiClient(\n    api_key=\"\u53ef\u9009\u7684API\u5bc6\u94a5\",\n    private_key_env_var=\"PRIVATE_KEY\",\n    client_kwargs={}\n)\n</code></pre> <p>\u6784\u9020\u51fd\u6570\u53c2\u6570\uff1a \u4e0e <code>AsyncUltraApiClient</code> \u76f8\u540c</p>"},{"location":"zh/api-reference/#_3","title":"\ud83d\udd27 \u6838\u5fc3\u65b9\u6cd5","text":""},{"location":"zh/api-reference/#order","title":"order()","text":"<p>\u521b\u5efa\u4ea4\u6362\u8ba2\u5355\u800c\u4e0d\u6267\u884c\u5b83\u3002</p>"},{"location":"zh/api-reference/#_4","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def order(self, request: UltraOrderRequest) -&gt; dict\n\n# \u540c\u6b65\ndef order(self, request: UltraOrderRequest) -&gt; dict\n</code></pre>"},{"location":"zh/api-reference/#_5","title":"\u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 <code>request</code> <code>UltraOrderRequest</code> \u8ba2\u5355\u8bf7\u6c42\u914d\u7f6e"},{"location":"zh/api-reference/#_6","title":"\u8fd4\u56de\u503c","text":"\u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>requestId</code> <code>str</code> \u8ba2\u5355\u7684\u552f\u4e00\u6807\u8bc6\u7b26 <code>transaction</code> <code>str</code> Base64 \u7f16\u7801\u7684\u4ea4\u6613 <code>status</code> <code>str</code> \u8ba2\u5355\u72b6\u6001\uff08<code>\"Success\"</code> \u6216 <code>\"Failed\"</code>\uff09"},{"location":"zh/api-reference/#_7","title":"\u793a\u4f8b","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\norder_request = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    amount=10000000,\n    taker=await client.get_public_key()\n)\n\nresponse = await client.order(order_request)\n</code></pre>"},{"location":"zh/api-reference/#execute","title":"execute()","text":"<p>\u6267\u884c\u5148\u524d\u521b\u5efa\u7684\u8ba2\u5355\u3002</p>"},{"location":"zh/api-reference/#_8","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def execute(self, request: UltraExecuteRequest) -&gt; dict\n\n# \u540c\u6b65\ndef execute(self, request: UltraExecuteRequest) -&gt; dict\n</code></pre>"},{"location":"zh/api-reference/#_9","title":"\u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 <code>request</code> <code>UltraExecuteRequest</code> \u5305\u542b\u7b7e\u540d\u4ea4\u6613\u7684\u6267\u884c\u8bf7\u6c42"},{"location":"zh/api-reference/#_10","title":"\u8fd4\u56de\u503c","text":"\u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>signature</code> <code>str</code> \u4ea4\u6613\u7b7e\u540d <code>status</code> <code>str</code> \u6267\u884c\u72b6\u6001\uff08<code>\"Success\"</code> \u6216 <code>\"Failed\"</code>\uff09 <code>error</code> <code>str</code> \u9519\u8bef\u4fe1\u606f\uff08\u5982\u679c\u5931\u8d25\uff09"},{"location":"zh/api-reference/#_11","title":"\u793a\u4f8b","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_execute_request_model import UltraExecuteRequest\n\nexecute_request = UltraExecuteRequest(\n    request_id=response[\"requestId\"],\n    signed_transaction=\"base64_signed_transaction\"\n)\n\nresult = await client.execute(execute_request)\n</code></pre>"},{"location":"zh/api-reference/#order_and_execute","title":"order_and_execute()","text":"<p>\u5728\u5355\u6b21\u8c03\u7528\u4e2d\u521b\u5efa\u5e76\u6267\u884c\u8ba2\u5355\u3002</p>"},{"location":"zh/api-reference/#_12","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def order_and_execute(self, request: UltraOrderRequest) -&gt; dict\n\n# \u540c\u6b65\ndef order_and_execute(self, request: UltraOrderRequest) -&gt; dict\n</code></pre>"},{"location":"zh/api-reference/#_13","title":"\u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 <code>request</code> <code>UltraOrderRequest</code> \u8ba2\u5355\u8bf7\u6c42\u914d\u7f6e"},{"location":"zh/api-reference/#_14","title":"\u8fd4\u56de\u503c","text":"<p>\u4e0e <code>execute()</code> \u65b9\u6cd5\u76f8\u540c\u3002</p>"},{"location":"zh/api-reference/#_15","title":"\u793a\u4f8b","text":"<pre><code>response = await client.order_and_execute(order_request)\nprint(f\"\u4ea4\u6613\u94fe\u63a5: https://solscan.io/tx/{response['signature']}\")\n</code></pre>"},{"location":"zh/api-reference/#balances","title":"balances()","text":"<p>\u83b7\u53d6 Solana \u5730\u5740\u7684\u4ee3\u5e01\u4f59\u989d\u3002</p>"},{"location":"zh/api-reference/#_16","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def balances(self, address: str) -&gt; dict\n\n# \u540c\u6b65\ndef balances(self, address: str) -&gt; dict\n</code></pre>"},{"location":"zh/api-reference/#_17","title":"\u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 <code>address</code> <code>str</code> Solana \u516c\u94a5\u5730\u5740"},{"location":"zh/api-reference/#_18","title":"\u8fd4\u56de\u503c","text":"<p>\u4ee3\u5e01\u7b26\u53f7\u5230\u4f59\u989d\u8be6\u60c5\u7684\u5b57\u5178\u6620\u5c04\uff1a</p> \u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>amount</code> <code>str</code> \u6700\u5c0f\u5355\u4f4d\u7684\u539f\u59cb\u91d1\u989d <code>uiAmount</code> <code>float</code> \u4eba\u7c7b\u53ef\u8bfb\u7684\u91d1\u989d <code>slot</code> <code>int</code> \u533a\u5757\u94fe\u69fd\u4f4d\u53f7 <code>isFrozen</code> <code>bool</code> \u4ee3\u5e01\u8d26\u6237\u662f\u5426\u88ab\u51bb\u7ed3"},{"location":"zh/api-reference/#_19","title":"\u793a\u4f8b","text":"<pre><code>address = await client.get_public_key()\nbalances = await client.balances(address)\n\nfor token, details in balances.items():\n    print(f\"{token}: {details['uiAmount']} (\u51bb\u7ed3: {details['isFrozen']})\")\n</code></pre>"},{"location":"zh/api-reference/#shield","title":"shield()","text":"<p>\u68c0\u67e5\u4ee3\u5e01\u7684\u5b89\u5168\u8b66\u544a\u3002</p>"},{"location":"zh/api-reference/#_20","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def shield(self, mints: list[str]) -&gt; dict\n\n# \u540c\u6b65\ndef shield(self, mints: list[str]) -&gt; dict\n</code></pre>"},{"location":"zh/api-reference/#_21","title":"\u53c2\u6570","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 <code>mints</code> <code>list[str]</code> \u4ee3\u5e01\u94f8\u9020\u5730\u5740\u5217\u8868"},{"location":"zh/api-reference/#_22","title":"\u8fd4\u56de\u503c","text":"\u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>warnings</code> <code>dict</code> \u94f8\u9020\u5730\u5740\u5230\u8b66\u544a\u5217\u8868\u7684\u6620\u5c04 <p>\u8b66\u544a\u5bf9\u8c61\u7ed3\u6784\uff1a</p> \u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>type</code> <code>str</code> \u8b66\u544a\u7c7b\u578b <code>message</code> <code>str</code> \u8b66\u544a\u63cf\u8ff0"},{"location":"zh/api-reference/#_23","title":"\u793a\u4f8b","text":"<pre><code>mints = [\n    \"So11111111111111111111111111111111111111112\",  # WSOL\n    \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n]\n\nshield_response = await client.shield(mints)\n\nfor mint, warnings in shield_response.get(\"warnings\", {}).items():\n    if warnings:\n        print(f\"\u26a0\ufe0f {mint} \u6709\u8b66\u544a:\")\n        for warning in warnings:\n            print(f\"  - {warning['type']}: {warning['message']}\")\n</code></pre>"},{"location":"zh/api-reference/#_24","title":"\ud83d\udce6 \u6570\u636e\u6a21\u578b","text":""},{"location":"zh/api-reference/#ultraorderrequest","title":"UltraOrderRequest","text":"<p>\u7528\u4e8e\u521b\u5efa\u4ea4\u6362\u8ba2\u5355\u7684 Pydantic \u6a21\u578b\u3002</p>"},{"location":"zh/api-reference/#_25","title":"\u5b57\u6bb5","text":"\u5b57\u6bb5 \u7c7b\u578b \u5fc5\u9700 \u63cf\u8ff0 <code>input_mint</code> <code>str</code> \u2705 \u8f93\u5165\u4ee3\u5e01\u94f8\u9020\u5730\u5740 <code>output_mint</code> <code>str</code> \u2705 \u8f93\u51fa\u4ee3\u5e01\u94f8\u9020\u5730\u5740 <code>amount</code> <code>int</code> \u2705 \u6700\u5c0f\u5355\u4f4d\u7684\u91d1\u989d <code>taker</code> <code>str</code> \u274c \u63a5\u6536\u8005\u7684\u516c\u94a5 <code>referral_account</code> <code>str</code> \u274c \u63a8\u8350\u8d26\u6237\u5730\u5740 <code>referral_fee</code> <code>int</code> \u274c \u63a8\u8350\u8d39\u7528\uff08\u57fa\u70b9\uff09"},{"location":"zh/api-reference/#_26","title":"\u793a\u4f8b","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nrequest = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    amount=10000000,\n    taker=\"your_public_key\",\n    referral_account=\"referral_address\",\n    referral_fee=50  # 0.5%\n)\n</code></pre>"},{"location":"zh/api-reference/#ultraexecuterequest","title":"UltraExecuteRequest","text":"<p>\u7528\u4e8e\u6267\u884c\u8ba2\u5355\u7684 Pydantic \u6a21\u578b\u3002</p>"},{"location":"zh/api-reference/#_27","title":"\u5b57\u6bb5","text":"\u5b57\u6bb5 \u7c7b\u578b \u5fc5\u9700 \u63cf\u8ff0 <code>request_id</code> <code>str</code> \u2705 \u6765\u81ea\u8ba2\u5355\u54cd\u5e94\u7684\u8bf7\u6c42 ID <code>signed_transaction</code> <code>str</code> \u2705 Base64 \u7f16\u7801\u7684\u7b7e\u540d\u4ea4\u6613"},{"location":"zh/api-reference/#_28","title":"\u793a\u4f8b","text":"<pre><code>from pyjupiter.models.ultra_api.ultra_execute_request_model import UltraExecuteRequest\n\nrequest = UltraExecuteRequest(\n    request_id=\"order_request_id\",\n    signed_transaction=\"base64_encoded_transaction\"\n)\n</code></pre>"},{"location":"zh/api-reference/#_29","title":"\u2699\ufe0f \u914d\u7f6e\u9009\u9879","text":""},{"location":"zh/api-reference/#_30","title":"\u5ba2\u6237\u7aef\u914d\u7f6e","text":"<p><code>client_kwargs</code> \u53c2\u6570\u5141\u8bb8\u5e7f\u6cdb\u7684\u81ea\u5b9a\u4e49\uff1a</p>"},{"location":"zh/api-reference/#_31","title":"\u8d85\u65f6\u8bbe\u7f6e","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"timeout\": 30,  # 30 \u79d2\n    }\n)\n</code></pre>"},{"location":"zh/api-reference/#_32","title":"\u4ee3\u7406\u914d\u7f6e","text":"<pre><code># SOCKS5 \u4ee3\u7406\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"proxies\": {\"https\": \"socks5://user:pass@host:port\"}\n    }\n)\n\n# HTTP \u4ee3\u7406\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"proxies\": {\n            \"http\": \"http://proxy.example.com:8080\",\n            \"https\": \"http://proxy.example.com:8080\"\n        }\n    }\n)\n</code></pre>"},{"location":"zh/api-reference/#_33","title":"\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"headers\": {\n            \"User-Agent\": \"MyApp/1.0\",\n            \"Accept-Language\": \"zh-CN,zh;q=0.9\"\n        }\n    }\n)\n</code></pre>"},{"location":"zh/api-reference/#ssl","title":"SSL \u914d\u7f6e","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"verify\": True,  # \u542f\u7528 SSL \u9a8c\u8bc1\n        # \u6216\u81ea\u5b9a\u4e49 CA \u5305\n        \"verify\": \"/path/to/ca-bundle.crt\"\n    }\n)\n</code></pre>"},{"location":"zh/api-reference/#dns","title":"DNS \u914d\u7f6e","text":"<pre><code>client = AsyncUltraApiClient(\n    client_kwargs={\n        \"resolve\": [\"api.jup.ag:443:1.2.3.4\"],\n        \"dns_servers\": [\"1.1.1.1\", \"1.0.0.1\"]\n    }\n)\n</code></pre>"},{"location":"zh/api-reference/#_34","title":"\u73af\u5883\u53d8\u91cf","text":"\u53d8\u91cf \u63cf\u8ff0 \u683c\u5f0f <code>PRIVATE_KEY</code> Solana \u94b1\u5305\u79c1\u94a5 Base58 \u5b57\u7b26\u4e32\u6216 uint8 \u6570\u7ec4 <code>JUPITER_API_KEY</code> Jupiter API \u5bc6\u94a5 \u5b57\u7b26\u4e32"},{"location":"zh/api-reference/#_35","title":"\u79c1\u94a5\u683c\u5f0f","text":"<pre><code># Base58 \u683c\u5f0f\uff08\u63a8\u8350\uff09\nexport PRIVATE_KEY=\"5KQwr...xyz\"\n\n# Uint8 \u6570\u7ec4\u683c\u5f0f\nexport PRIVATE_KEY=\"[10,229,131,132,213,96,74,22,...]\"\n</code></pre>"},{"location":"zh/api-reference/#_36","title":"\ud83d\udea8 \u9519\u8bef\u5904\u7406","text":""},{"location":"zh/api-reference/#_37","title":"\u5e38\u89c1\u5f02\u5e38","text":"\u5f02\u5e38 \u63cf\u8ff0 \u53d1\u751f\u65f6\u673a <code>ValueError</code> \u65e0\u6548\u7684\u8f93\u5165\u53c2\u6570 \u79c1\u94a5\u683c\u5f0f\u65e0\u6548\u3001\u7f3a\u5c11\u5fc5\u9700\u5b57\u6bb5 <code>requests.HTTPError</code> HTTP \u9519\u8bef API \u9519\u8bef\uff084xx\u30015xx \u54cd\u5e94\uff09 <code>ConnectionError</code> \u7f51\u7edc\u8fde\u63a5\u95ee\u9898 \u7f51\u7edc\u95ee\u9898\u3001\u4ee3\u7406\u95ee\u9898 <code>TimeoutError</code> \u8bf7\u6c42\u8d85\u65f6 \u8bf7\u6c42\u5b8c\u6210\u65f6\u95f4\u8fc7\u957f"},{"location":"zh/api-reference/#_38","title":"\u54cd\u5e94\u72b6\u6001\u7801","text":"\u72b6\u6001 \u63cf\u8ff0 <code>\"Success\"</code> \u64cd\u4f5c\u6210\u529f\u5b8c\u6210 <code>\"Failed\"</code> \u64cd\u4f5c\u5931\u8d25"},{"location":"zh/api-reference/#_39","title":"\u9519\u8bef\u54cd\u5e94\u7ed3\u6784","text":"<p>\u5931\u8d25\u7684\u54cd\u5e94\u5305\u542b\u989d\u5916\u7684\u9519\u8bef\u4fe1\u606f\uff1a</p> \u5b57\u6bb5 \u7c7b\u578b \u63cf\u8ff0 <code>status</code> <code>str</code> \u59cb\u7ec8\u4e3a <code>\"Failed\"</code> <code>error</code> <code>str</code> \u4eba\u7c7b\u53ef\u8bfb\u7684\u9519\u8bef\u4fe1\u606f <code>code</code> <code>str</code> \u7528\u4e8e\u7a0b\u5e8f\u5904\u7406\u7684\u9519\u8bef\u4ee3\u7801"},{"location":"zh/api-reference/#_40","title":"\u5e38\u89c1\u9519\u8bef\u4ee3\u7801","text":"\u9519\u8bef\u4ee3\u7801 \u63cf\u8ff0 \u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848 <code>INSUFFICIENT_BALANCE</code> \u4ee3\u5e01\u4e0d\u8db3\u65e0\u6cd5\u4ea4\u6362 \u68c0\u67e5\u4f59\u989d\uff0c\u51cf\u5c11\u91d1\u989d <code>SLIPPAGE_EXCEEDED</code> \u4ef7\u683c\u53d8\u52a8\u8d85\u51fa\u5bb9\u5fcd\u5ea6 \u91cd\u8bd5\u6216\u8c03\u6574\u6ed1\u70b9 <code>INVALID_MINT</code> \u65e0\u6548\u7684\u4ee3\u5e01\u94f8\u9020\u5730\u5740 \u9a8c\u8bc1\u94f8\u9020\u5730\u5740 <code>RATE_LIMITED</code> \u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41 \u5728\u8bf7\u6c42\u4e4b\u95f4\u6dfb\u52a0\u5ef6\u8fdf"},{"location":"zh/api-reference/#_41","title":"\u9519\u8bef\u5904\u7406\u793a\u4f8b","text":"<pre><code>try:\n    response = await client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Failed\":\n        error_code = response.get(\"code\")\n        error_message = response.get(\"error\")\n\n        if error_code == \"INSUFFICIENT_BALANCE\":\n            print(\"\u274c \u4f59\u989d\u4e0d\u8db3\u65e0\u6cd5\u4ea4\u6362\")\n        elif error_code == \"SLIPPAGE_EXCEEDED\":\n            print(\"\u274c \u4ef7\u683c\u53d8\u52a8\u8fc7\u5927\uff0c\u8bf7\u91cd\u8bd5\")\n        else:\n            print(f\"\u274c \u9519\u8bef: {error_message}\")\n    else:\n        print(f\"\u2705 \u6210\u529f: {response['signature']}\")\n\nexcept ValueError as e:\n    print(f\"\u274c \u914d\u7f6e\u9519\u8bef: {e}\")\nexcept requests.HTTPError as e:\n    print(f\"\u274c API \u9519\u8bef: {e}\")\nexcept Exception as e:\n    print(f\"\u274c \u610f\u5916\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"zh/api-reference/#_42","title":"\ud83d\udee0\ufe0f \u5b9e\u7528\u65b9\u6cd5","text":""},{"location":"zh/api-reference/#get_public_key","title":"get_public_key()","text":"<p>\u83b7\u53d6\u914d\u7f6e\u94b1\u5305\u7684\u516c\u94a5\u3002</p>"},{"location":"zh/api-reference/#_43","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def get_public_key(self) -&gt; str\n\n# \u540c\u6b65\ndef get_public_key(self) -&gt; str\n</code></pre>"},{"location":"zh/api-reference/#_44","title":"\u8fd4\u56de\u503c","text":"\u7c7b\u578b \u63cf\u8ff0 <code>str</code> Base58 \u7f16\u7801\u7684\u516c\u94a5"},{"location":"zh/api-reference/#_45","title":"\u793a\u4f8b","text":"<pre><code>public_key = await client.get_public_key()\nprint(f\"\u94b1\u5305\u5730\u5740: {public_key}\")\n</code></pre>"},{"location":"zh/api-reference/#close","title":"close()","text":"<p>\u5173\u95ed\u5ba2\u6237\u7aef\u5e76\u6e05\u7406\u8d44\u6e90\u3002</p>"},{"location":"zh/api-reference/#_46","title":"\u65b9\u6cd5\u7b7e\u540d","text":"<pre><code># \u5f02\u6b65\nasync def close(self) -&gt; None\n\n# \u540c\u6b65\ndef close(self) -&gt; None\n</code></pre>"},{"location":"zh/api-reference/#_47","title":"\u793a\u4f8b","text":"<pre><code># \u4f7f\u7528\u5b8c\u6bd5\u540e\u59cb\u7ec8\u5173\u95ed\u5ba2\u6237\u7aef\ntry:\n    # \u60a8\u7684\u64cd\u4f5c\u5728\u8fd9\u91cc\n    pass\nfinally:\n    await client.close()  # \u5f02\u6b65\u5ba2\u6237\u7aef\n    # client.close()      # \u540c\u6b65\u5ba2\u6237\u7aef\n</code></pre>"},{"location":"zh/api-reference/#_48","title":"\ud83d\udd0d \u9ad8\u7ea7\u4f7f\u7528\u6a21\u5f0f","text":""},{"location":"zh/api-reference/#_49","title":"\u901f\u7387\u9650\u5236","text":"<pre><code>import asyncio\n\n# \u7528\u4e8e\u5e76\u53d1\u8bf7\u6c42\u9650\u5236\u7684\u4fe1\u53f7\u91cf\nsemaphore = asyncio.Semaphore(5)  # \u6700\u591a 5 \u4e2a\u5e76\u53d1\u8bf7\u6c42\n\nasync def rate_limited_request(client, mint):\n    async with semaphore:\n        return await client.shield([mint])\n</code></pre>"},{"location":"zh/api-reference/#_50","title":"\u91cd\u8bd5\u903b\u8f91","text":"<pre><code>import asyncio\n\nasync def retry_operation(operation, max_retries=3, delay=1.0):\n    for attempt in range(max_retries):\n        try:\n            return await operation()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            await asyncio.sleep(delay * (attempt + 1))\n</code></pre>"},{"location":"zh/api-reference/#_51","title":"\u6279\u91cf\u64cd\u4f5c","text":"<pre><code>async def batch_shield_check(client, mint_lists):\n    tasks = [client.shield(mints) for mints in mint_lists]\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    return results\n</code></pre>"},{"location":"zh/api-reference/#_52","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6a21\u5f0f","text":"<pre><code>class ManagedClient:\n    def __init__(self, **kwargs):\n        self.kwargs = kwargs\n        self.client = None\n\n    async def __aenter__(self):\n        self.client = AsyncUltraApiClient(**self.kwargs)\n        return self.client\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.client:\n            await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync with ManagedClient(api_key=\"your_key\") as client:\n    response = await client.balances(address)\n</code></pre>"},{"location":"zh/api-reference/#_53","title":"\ud83d\udcca \u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":""},{"location":"zh/api-reference/#_54","title":"\u8fde\u63a5\u590d\u7528","text":"<pre><code># \u597d\u7684\u505a\u6cd5\uff1a\u4e3a\u591a\u4e2a\u64cd\u4f5c\u590d\u7528\u5ba2\u6237\u7aef\nclient = AsyncUltraApiClient()\ntry:\n    for address in addresses:\n        balances = await client.balances(address)\n        # \u5904\u7406\u4f59\u989d\nfinally:\n    await client.close()\n\n# \u907f\u514d\uff1a\u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u521b\u5efa\u65b0\u5ba2\u6237\u7aef\nfor address in addresses:\n    client = AsyncUltraApiClient()\n    balances = await client.balances(address)\n    await client.close()  # \u4f4e\u6548\n</code></pre>"},{"location":"zh/api-reference/#_55","title":"\u5e76\u53d1\u64cd\u4f5c","text":"<pre><code># \u9ad8\u6548\u7684\u5e76\u53d1\u5904\u7406\nasync def process_addresses(client, addresses):\n    tasks = [client.balances(addr) for addr in addresses]\n    results = await asyncio.gather(*tasks)\n    return results\n</code></pre>"},{"location":"zh/api-reference/#_56","title":"\u8d85\u65f6\u914d\u7f6e","text":"<pre><code># \u4e3a\u60a8\u7684\u7528\u4f8b\u8bbe\u7f6e\u9002\u5f53\u7684\u8d85\u65f6\nclient = AsyncUltraApiClient(\n    client_kwargs={\n        \"timeout\": 10,  # \u5feb\u901f\u64cd\u4f5c\n        # \"timeout\": 60,  # \u6162\u901f\u64cd\u4f5c\n    }\n)\n</code></pre> <p>\u66f4\u591a\u793a\u4f8b\u548c\u7528\u4f8b\uff0c\u8bf7\u53c2\u9605\u4ee3\u7801\u793a\u4f8b\u6587\u6863\u3002</p>"},{"location":"zh/examples/","title":"\u4ee3\u7801\u793a\u4f8b\u4e0e\u4f7f\u7528\u573a\u666f","text":"<p>\u6709\u6548\u4f7f\u7528 Jupiter Python SDK \u7684\u771f\u5b9e\u793a\u4f8b\u548c\u6a21\u5f0f\u3002</p>"},{"location":"zh/examples/#_2","title":"\ud83d\udcda \u76ee\u5f55","text":"<ul> <li>\u57fa\u7840\u793a\u4f8b</li> <li>\u4ea4\u6613\u7b56\u7565</li> <li>\u6295\u8d44\u7ec4\u5408\u7ba1\u7406</li> <li>\u4ee3\u5e01\u5206\u6790</li> <li>\u9ad8\u7ea7\u6a21\u5f0f</li> <li>\u9519\u8bef\u5904\u7406\u6a21\u5f0f</li> <li>\u6027\u80fd\u4f18\u5316</li> </ul>"},{"location":"zh/examples/#_3","title":"\ud83d\ude80 \u57fa\u7840\u793a\u4f8b","text":""},{"location":"zh/examples/#_4","title":"\u7b80\u5355\u4ee3\u5e01\u4ea4\u6362","text":"<p>\u6700\u57fa\u672c\u7684\u7528\u4f8b - \u5c06\u4e00\u79cd\u4ee3\u5e01\u4ea4\u6362\u4e3a\u53e6\u4e00\u79cd\uff1a</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def simple_swap():\n    \"\"\"\u4ea4\u6362 0.1 WSOL \u4e3a USDC\"\"\"\n    client = AsyncUltraApiClient()\n\n    try:\n        # \u83b7\u53d6\u94b1\u5305\u5730\u5740\n        wallet = await client.get_public_key()\n        print(f\"\ud83d\udd0d \u4f7f\u7528\u94b1\u5305: {wallet}\")\n\n        # \u521b\u5efa\u4ea4\u6362\u8ba2\u5355\n        order = UltraOrderRequest(\n            input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n            output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n            amount=100_000_000,  # 0.1 WSOL\n            taker=wallet\n        )\n\n        # \u6267\u884c\u4ea4\u6362\n        result = await client.order_and_execute(order)\n\n        if result.get(\"status\") == \"Success\":\n            print(f\"\u2705 \u4ea4\u6362\u6210\u529f\uff01\")\n            print(f\"\ud83d\udccb \u4ea4\u6613\u94fe\u63a5: https://solscan.io/tx/{result['signature']}\")\n        else:\n            print(f\"\u274c \u4ea4\u6362\u5931\u8d25: {result.get('error')}\")\n\n    finally:\n        await client.close()\n\nasyncio.run(simple_swap())\n</code></pre>"},{"location":"zh/examples/#_5","title":"\u68c0\u67e5\u591a\u4e2a\u4ee3\u5e01\u4f59\u989d","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_portfolio():\n    \"\"\"\u68c0\u67e5\u591a\u4e2a\u4ee3\u5e01\u7684\u4f59\u989d\"\"\"\n    client = AsyncUltraApiClient()\n\n    try:\n        wallet = await client.get_public_key()\n        balances = await client.balances(wallet)\n\n        print(f\"\ud83d\udcb0 \u6295\u8d44\u7ec4\u5408 {wallet[:8]}...\")\n        print(\"=\" * 50)\n\n        total_value = 0\n        for token, details in balances.items():\n            amount = details.get('uiAmount', 0)\n            frozen = details.get('isFrozen', False)\n\n            status_icon = \"\ud83e\uddca\" if frozen else \"\u2705\"\n            print(f\"{status_icon} {token:&lt;8} {amount:&gt;15.6f}\")\n\n        print(\"=\" * 50)\n\n    finally:\n        await client.close()\n\nasyncio.run(check_portfolio())\n</code></pre>"},{"location":"zh/examples/#_6","title":"\u4ee3\u5e01\u5b89\u5168\u68c0\u67e5","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def safety_check():\n    \"\"\"\u68c0\u67e5\u70ed\u95e8\u4ee3\u5e01\u7684\u5b89\u5168\u6027\"\"\"\n    client = AsyncUltraApiClient()\n\n    # \u70ed\u95e8 Solana \u4ee3\u5e01\n    popular_tokens = [\n        (\"WSOL\", \"So11111111111111111111111111111111111111112\"),\n        (\"USDC\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n        (\"USDT\", \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\n        (\"BONK\", \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"),\n    ]\n\n    try:\n        mints = [mint for _, mint in popular_tokens]\n        shield_result = await client.shield(mints)\n\n        print(\"\ud83d\udee1\ufe0f \u4ee3\u5e01\u5b89\u5168\u62a5\u544a\")\n        print(\"=\" * 40)\n\n        for name, mint in popular_tokens:\n            warnings = shield_result.get(\"warnings\", {}).get(mint, [])\n\n            if warnings:\n                print(f\"\u26a0\ufe0f  {name:&lt;8} - {len(warnings)} \u4e2a\u8b66\u544a\")\n                for warning in warnings:\n                    print(f\"   \u2514\u2500 {warning.get('type')}: {warning.get('message')}\")\n            else:\n                print(f\"\u2705 {name:&lt;8} - \u5b89\u5168\")\n\n    finally:\n        await client.close()\n\nasyncio.run(safety_check())\n</code></pre>"},{"location":"zh/examples/#_7","title":"\ud83d\udcc8 \u4ea4\u6613\u7b56\u7565","text":""},{"location":"zh/examples/#dca","title":"\u5b9a\u6295\u7b56\u7565 (DCA)","text":"<pre><code>import asyncio\nfrom datetime import datetime\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass DCABot:\n    def __init__(self, api_key=None):\n        self.client = AsyncUltraApiClient(api_key=api_key)\n\n    async def dca_buy(self, input_mint, output_mint, amount_sol, frequency_hours=24):\n        \"\"\"\u6267\u884c\u5b9a\u6295\u7b56\u7565\"\"\"\n        try:\n            wallet = await self.client.get_public_key()\n\n            # \u68c0\u67e5\u5f53\u524d\u4f59\u989d\n            balances = await self.client.balances(wallet)\n            sol_balance = balances.get(\"SOL\", {}).get(\"uiAmount\", 0)\n\n            if sol_balance &lt; amount_sol:\n                print(f\"\u274c SOL \u4f59\u989d\u4e0d\u8db3: {sol_balance}\")\n                return\n\n            # \u521b\u5efa\u8ba2\u5355\n            order = UltraOrderRequest(\n                input_mint=input_mint,\n                output_mint=output_mint,\n                amount=int(amount_sol * 10**9),  # \u8f6c\u6362\u4e3a lamports\n                taker=wallet\n            )\n\n            print(f\"\ud83d\udd04 \u5b9a\u6295: \u7528 {amount_sol} SOL \u8d2d\u4e70\u4ee3\u5e01...\")\n            result = await self.client.order_and_execute(order)\n\n            if result.get(\"status\") == \"Success\":\n                print(f\"\u2705 \u5b9a\u6295\u6267\u884c\u6210\u529f\uff01\")\n                print(f\"\ud83d\udccb \u4ea4\u6613: {result['signature']}\")\n\n                # \u8bb0\u5f55\u4ea4\u6613\n                timestamp = datetime.now().isoformat()\n                print(f\"\ud83d\udcc5 {timestamp}: \u7528 {amount_sol} SOL \u8d2d\u4e70\")\n            else:\n                print(f\"\u274c \u5b9a\u6295\u5931\u8d25: {result.get('error')}\")\n\n        except Exception as e:\n            print(f\"\ud83d\udca5 \u5b9a\u6295\u9519\u8bef: {e}\")\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def run_dca():\n    bot = DCABot()\n    try:\n        await bot.dca_buy(\n            input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n            output_mint=\"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n            amount_sol=0.01  # \u7528 0.01 SOL \u8d2d\u4e70\n        )\n    finally:\n        await bot.close()\n\nasyncio.run(run_dca())\n</code></pre>"},{"location":"zh/examples/#_8","title":"\u5957\u5229\u626b\u63cf\u5668","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass ArbitrageScanner:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def scan_arbitrage(self, token_pairs, min_profit_bps=50):\n        \"\"\"\u626b\u63cf\u5957\u5229\u673a\u4f1a\"\"\"\n        opportunities = []\n\n        for input_mint, output_mint in token_pairs:\n            try:\n                # \u83b7\u53d6 1 SOL \u7684\u62a5\u4ef7\n                test_amount = 1_000_000_000  # 1 SOL\n\n                # \u6b63\u5411\u4ea4\u6613: input -&gt; output\n                forward_order = UltraOrderRequest(\n                    input_mint=input_mint,\n                    output_mint=output_mint,\n                    amount=test_amount,\n                    taker=await self.client.get_public_key()\n                )\n\n                forward_quote = await self.client.order(forward_order)\n\n                if forward_quote.get(\"status\") == \"Success\":\n                    # \u8ba1\u7b97\u6f5c\u5728\u5229\u6da6\n                    # \u8fd9\u91cc\u7b80\u5316\u4e86 - \u5b9e\u9645\u60c5\u51b5\u4e0b\u9700\u8981\u89e3\u6790\u4ea4\u6613\u4ee5\u83b7\u5f97\u786e\u5207\u7684\u8f93\u51fa\u91d1\u989d\n                    print(f\"\ud83d\udcca \u5206\u6790 {input_mint[:8]}... -&gt; {output_mint[:8]}...\")\n\n                    # \u60a8\u9700\u8981\u5728\u8fd9\u91cc\u5b9e\u73b0\u5229\u6da6\u8ba1\u7b97\u903b\u8f91\n                    # opportunities.append({...})\n\n            except Exception as e:\n                print(f\"\u274c \u626b\u63cf {input_mint[:8]}... \u65f6\u51fa\u9519: {e}\")\n\n        return opportunities\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def run_arbitrage_scan():\n    scanner = ArbitrageScanner()\n    try:\n        pairs = [\n            (\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),  # WSOL/USDC\n            (\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\", \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),  # USDC/USDT\n        ]\n\n        opportunities = await scanner.scan_arbitrage(pairs)\n        print(f\"\u53d1\u73b0 {len(opportunities)} \u4e2a\u5957\u5229\u673a\u4f1a\")\n\n    finally:\n        await scanner.close()\n\nasyncio.run(run_arbitrage_scan())\n</code></pre>"},{"location":"zh/examples/#_9","title":"\ud83d\udcbc \u6295\u8d44\u7ec4\u5408\u7ba1\u7406","text":""},{"location":"zh/examples/#_10","title":"\u6295\u8d44\u7ec4\u5408\u518d\u5e73\u8861\u5668","text":"<pre><code>import asyncio\nfrom typing import Dict\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nclass PortfolioRebalancer:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def rebalance_portfolio(self, target_allocations: Dict[str, float]):\n        \"\"\"\n        \u91cd\u65b0\u5e73\u8861\u6295\u8d44\u7ec4\u5408\u5230\u76ee\u6807\u914d\u7f6e\n\n        \u53c2\u6570:\n            target_allocations: {\"SOL\": 0.5, \"USDC\": 0.3, \"BONK\": 0.2}\n        \"\"\"\n        try:\n            wallet = await self.client.get_public_key()\n            balances = await self.client.balances(wallet)\n\n            print(\"\ud83d\udd04 \u5f00\u59cb\u6295\u8d44\u7ec4\u5408\u91cd\u65b0\u5e73\u8861...\")\n            print(\"=\" * 50)\n\n            # \u8ba1\u7b97\u5f53\u524d\u914d\u7f6e\n            total_value = 0  # \u60a8\u9700\u8981\u83b7\u53d6\u7f8e\u5143\u4ef7\u503c\n            current_allocations = {}\n\n            for token, details in balances.items():\n                amount = details.get('uiAmount', 0)\n                # \u7b80\u5316 - \u60a8\u9700\u8981\u771f\u5b9e\u7684\u4ef7\u683c\u6570\u636e\n                current_allocations[token] = amount\n\n            print(\"\ud83d\udcca \u5f53\u524d\u4e0e\u76ee\u6807\u914d\u7f6e:\")\n            for token, target in target_allocations.items():\n                current = current_allocations.get(token, 0)\n                print(f\"{token:&lt;8} \u5f53\u524d: {current:&gt;8.2f}% \u76ee\u6807: {target*100:&gt;6.1f}%\")\n\n            # \u6267\u884c\u91cd\u65b0\u5e73\u8861\u4ea4\u6613\n            # \u8fd9\u91cc\u60a8\u9700\u8981\u5b9e\u73b0\u5b9e\u9645\u7684\u91cd\u65b0\u5e73\u8861\u903b\u8f91\n            print(\"\u2705 \u91cd\u65b0\u5e73\u8861\u5b8c\u6210\uff01\")\n\n        except Exception as e:\n            print(f\"\u274c \u91cd\u65b0\u5e73\u8861\u5931\u8d25: {e}\")\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def rebalance():\n    rebalancer = PortfolioRebalancer()\n    try:\n        await rebalancer.rebalance_portfolio({\n            \"SOL\": 0.4,\n            \"USDC\": 0.4,\n            \"BONK\": 0.2\n        })\n    finally:\n        await rebalancer.close()\n\nasyncio.run(rebalance())\n</code></pre>"},{"location":"zh/examples/#_11","title":"\u591a\u94b1\u5305\u6295\u8d44\u7ec4\u5408\u8ddf\u8e2a\u5668","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass MultiWalletTracker:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def track_wallets(self, wallet_addresses: List[str]):\n        \"\"\"\u5e76\u53d1\u8ddf\u8e2a\u591a\u4e2a\u94b1\u5305\"\"\"\n        print(\"\ud83d\udc65 \u591a\u94b1\u5305\u6295\u8d44\u7ec4\u5408\u8ddf\u8e2a\u5668\")\n        print(\"=\" * 60)\n\n        # \u4e3a\u5e76\u53d1\u4f59\u989d\u83b7\u53d6\u521b\u5efa\u4efb\u52a1\n        tasks = [\n            self.get_wallet_summary(address)\n            for address in wallet_addresses\n        ]\n\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # \u6c47\u603b\u7ed3\u679c\n        total_wallets = len(wallet_addresses)\n        successful_wallets = sum(1 for r in results if not isinstance(r, Exception))\n\n        print(f\"\\n\ud83d\udcca \u6458\u8981: {successful_wallets}/{total_wallets} \u4e2a\u94b1\u5305\u5df2\u5904\u7406\")\n\n    async def get_wallet_summary(self, address: str):\n        \"\"\"\u83b7\u53d6\u5355\u4e2a\u94b1\u5305\u7684\u6458\u8981\"\"\"\n        try:\n            balances = await self.client.balances(address)\n\n            print(f\"\\n\ud83d\udcb0 \u94b1\u5305: {address[:8]}...{address[-8:]}\")\n            print(\"-\" * 40)\n\n            token_count = len(balances)\n            total_tokens = sum(\n                details.get('uiAmount', 0)\n                for details in balances.values()\n            )\n\n            print(f\"\ud83d\udcc8 \u4ee3\u5e01\u6570\u91cf: {token_count}\")\n\n            # \u663e\u793a\u4e3b\u8981\u6301\u4ed3\n            sorted_balances = sorted(\n                balances.items(),\n                key=lambda x: x[1].get('uiAmount', 0),\n                reverse=True\n            )\n\n            for token, details in sorted_balances[:5]:  # \u524d 5 \u4f4d\n                amount = details.get('uiAmount', 0)\n                if amount &gt; 0:\n                    print(f\"   {token:&lt;8} {amount:&gt;12.6f}\")\n\n            return {\n                \"address\": address,\n                \"token_count\": token_count,\n                \"balances\": balances\n            }\n\n        except Exception as e:\n            print(f\"\u274c \u83b7\u53d6 {address[:8]}... \u65f6\u51fa\u9519: {e}\")\n            return e\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def track_multiple_wallets():\n    tracker = MultiWalletTracker()\n    try:\n        # \u5728\u8fd9\u91cc\u6dfb\u52a0\u60a8\u7684\u94b1\u5305\u5730\u5740\n        wallets = [\n            \"YourWalletAddress1...\",\n            \"YourWalletAddress2...\",\n            # \u6dfb\u52a0\u66f4\u591a\u94b1\u5305\u5730\u5740\n        ]\n\n        await tracker.track_wallets(wallets)\n\n    finally:\n        await tracker.close()\n\n# asyncio.run(track_multiple_wallets())\n</code></pre>"},{"location":"zh/examples/#_12","title":"\ud83d\udd0d \u4ee3\u5e01\u5206\u6790","text":""},{"location":"zh/examples/#_13","title":"\u4ee3\u5e01\u98ce\u9669\u8bc4\u4f30","text":"<pre><code>import asyncio\nfrom typing import Dict, List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass TokenAnalyzer:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def analyze_token_list(self, token_list: List[Dict[str, str]]):\n        \"\"\"\u5206\u6790\u4ee3\u5e01\u5217\u8868\u7684\u98ce\u9669\"\"\"\n        print(\"\ud83d\udd0d \u4ee3\u5e01\u98ce\u9669\u5206\u6790\")\n        print(\"=\" * 50)\n\n        # \u63d0\u53d6\u94f8\u9020\u5730\u5740\n        mints = [token[\"mint\"] for token in token_list]\n\n        # \u6279\u91cf\u5b89\u5168\u68c0\u67e5\n        shield_result = await self.client.shield(mints)\n        warnings_dict = shield_result.get(\"warnings\", {})\n\n        # \u5206\u6790\u6bcf\u4e2a\u4ee3\u5e01\n        for token in token_list:\n            name = token[\"name\"]\n            mint = token[\"mint\"]\n            warnings = warnings_dict.get(mint, [])\n\n            print(f\"\\n\ud83e\ude99 {name} ({mint[:8]}...)\")\n            print(\"-\" * 30)\n\n            if not warnings:\n                print(\"\u2705 \u672a\u68c0\u6d4b\u5230\u5b89\u5168\u8b66\u544a\")\n                risk_score = \"\u4f4e\"\n            else:\n                risk_score = self.calculate_risk_score(warnings)\n                print(f\"\u26a0\ufe0f  \u68c0\u6d4b\u5230 {len(warnings)} \u4e2a\u8b66\u544a:\")\n\n                for warning in warnings:\n                    warning_type = warning.get(\"type\", \"\u672a\u77e5\")\n                    message = warning.get(\"message\", \"\u65e0\u6d88\u606f\")\n                    print(f\"   \u2022 {warning_type}: {message}\")\n\n            print(f\"\ud83c\udfaf \u98ce\u9669\u8bc4\u5206: {risk_score}\")\n\n    def calculate_risk_score(self, warnings: List[Dict]) -&gt; str:\n        \"\"\"\u6839\u636e\u8b66\u544a\u8ba1\u7b97\u98ce\u9669\u8bc4\u5206\"\"\"\n        if not warnings:\n            return \"\u4f4e\"\n\n        high_risk_types = [\"rugpull\", \"scam\", \"suspicious\"]\n        medium_risk_types = [\"liquidity\", \"volume\"]\n\n        for warning in warnings:\n            warning_type = warning.get(\"type\", \"\").lower()\n            if any(risk in warning_type for risk in high_risk_types):\n                return \"\u9ad8\"\n            elif any(risk in warning_type for risk in medium_risk_types):\n                return \"\u4e2d\"\n\n        return \"\u4e2d\" if len(warnings) &gt; 2 else \"\u4f4e\"\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def analyze_tokens():\n    analyzer = TokenAnalyzer()\n    try:\n        tokens_to_analyze = [\n            {\"name\": \"\u5305\u88c5 SOL\", \"mint\": \"So11111111111111111111111111111111111111112\"},\n            {\"name\": \"\u7f8e\u5143\u786c\u5e01\", \"mint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"},\n            {\"name\": \"Bonk\", \"mint\": \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"},\n        ]\n\n        await analyzer.analyze_token_list(tokens_to_analyze)\n\n    finally:\n        await analyzer.close()\n\nasyncio.run(analyze_tokens())\n</code></pre>"},{"location":"zh/examples/#_14","title":"\u5e02\u573a\u626b\u63cf\u5668","text":"<pre><code>import asyncio\nfrom typing import List, Dict\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass MarketScanner:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n\n    async def scan_trending_tokens(self, base_mints: List[str]):\n        \"\"\"\u6839\u636e\u4ea4\u6613\u91cf\u626b\u63cf\u70ed\u95e8\u4ee3\u5e01\"\"\"\n        print(\"\ud83d\udcc8 \u5e02\u573a\u626b\u63cf\u5668 - \u70ed\u95e8\u4ee3\u5e01\")\n        print(\"=\" * 50)\n\n        trending_data = []\n\n        for mint in base_mints:\n            try:\n                # \u9996\u5148\u68c0\u67e5\u5b89\u5168\u6027\n                shield_result = await self.client.shield([mint])\n                warnings = shield_result.get(\"warnings\", {}).get(mint, [])\n\n                safety_status = \"\ud83d\udd34 \u6709\u98ce\u9669\" if warnings else \"\ud83d\udfe2 \u5b89\u5168\"\n\n                print(f\"\\n\ud83d\udd0d \u5206\u6790 {mint[:8]}...\")\n                print(f\"   \u5b89\u5168\u6027: {safety_status}\")\n\n                if warnings:\n                    print(f\"   \u8b66\u544a: {len(warnings)} \u4e2a\")\n                    for warning in warnings[:2]:  # \u663e\u793a\u524d 2 \u4e2a\u8b66\u544a\n                        print(f\"     \u2022 {warning.get('type')}\")\n\n                trending_data.append({\n                    \"mint\": mint,\n                    \"safety_status\": safety_status,\n                    \"warning_count\": len(warnings)\n                })\n\n            except Exception as e:\n                print(f\"\u274c \u5206\u6790 {mint[:8]}... \u65f6\u51fa\u9519: {e}\")\n\n        # \u6309\u5b89\u5168\u6027\u6392\u5e8f\uff08\u5b89\u5168\u4ee3\u5e01\u4f18\u5148\uff09\n        trending_data.sort(key=lambda x: x[\"warning_count\"])\n\n        print(f\"\\n\ud83d\udcca \u626b\u63cf\u7ed3\u679c ({len(trending_data)} \u4e2a\u4ee3\u5e01):\")\n        print(\"-\" * 40)\n\n        for data in trending_data:\n            mint = data[\"mint\"]\n            status = data[\"safety_status\"]\n            warnings = data[\"warning_count\"]\n            print(f\"{status} {mint[:8]}... ({warnings} \u4e2a\u8b66\u544a)\")\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def scan_market():\n    scanner = MarketScanner()\n    try:\n        # \u8981\u626b\u63cf\u7684\u70ed\u95e8\u4ee3\u5e01\u94f8\u9020\u5730\u5740\n        tokens = [\n            \"So11111111111111111111111111111111111111112\",  # WSOL\n            \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n            \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",  # USDT\n            \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n        ]\n\n        await scanner.scan_trending_tokens(tokens)\n\n    finally:\n        await scanner.close()\n\nasyncio.run(scan_market())\n</code></pre>"},{"location":"zh/examples/#_15","title":"\u26a1 \u9ad8\u7ea7\u6a21\u5f0f","text":""},{"location":"zh/examples/#_16","title":"\u8fde\u63a5\u6c60\u7ba1\u7406\u5668","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass ConnectionPoolManager:\n    def __init__(self, pool_size: int = 5):\n        self.pool_size = pool_size\n        self.clients: List[AsyncUltraApiClient] = []\n        self.current_index = 0\n\n    async def initialize(self):\n        \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\u6c60\"\"\"\n        print(f\"\ud83d\udd17 \u521d\u59cb\u5316\u8fde\u63a5\u6c60 (\u5927\u5c0f: {self.pool_size})\")\n\n        for i in range(self.pool_size):\n            client = AsyncUltraApiClient()\n            self.clients.append(client)\n\n    def get_client(self) -&gt; AsyncUltraApiClient:\n        \"\"\"\u4ece\u6c60\u4e2d\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5ba2\u6237\u7aef\uff08\u8f6e\u8be2\uff09\"\"\"\n        client = self.clients[self.current_index]\n        self.current_index = (self.current_index + 1) % self.pool_size\n        return client\n\n    async def batch_operation(self, addresses: List[str]):\n        \"\"\"\u4f7f\u7528\u8fde\u63a5\u6c60\u6267\u884c\u6279\u91cf\u64cd\u4f5c\"\"\"\n        semaphore = asyncio.Semaphore(self.pool_size)\n\n        async def process_address(address):\n            async with semaphore:\n                client = self.get_client()\n                try:\n                    return await client.balances(address)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n        tasks = [process_address(addr) for addr in addresses]\n        results = await asyncio.gather(*tasks)\n        return results\n\n    async def close_all(self):\n        \"\"\"\u5173\u95ed\u6c60\u4e2d\u7684\u6240\u6709\u8fde\u63a5\"\"\"\n        print(\"\ud83d\udd0c \u5173\u95ed\u8fde\u63a5\u6c60...\")\n        for client in self.clients:\n            await client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def use_connection_pool():\n    pool = ConnectionPoolManager(pool_size=3)\n    try:\n        await pool.initialize()\n\n        # \u6a21\u62df\u6279\u91cf\u5904\u7406\n        addresses = [\n            \"11111111111111111111111111111111\",  # \u793a\u4f8b\u5730\u5740\n            \"22222222222222222222222222222222\",\n            \"33333333333333333333333333333333\",\n        ]\n\n        results = await pool.batch_operation(addresses)\n        print(f\"\u2705 \u5904\u7406\u4e86 {len(results)} \u4e2a\u5730\u5740\")\n\n    finally:\n        await pool.close_all()\n\n# asyncio.run(use_connection_pool())\n</code></pre>"},{"location":"zh/examples/#_17","title":"\u9650\u901f\u4ea4\u6613\u673a\u5668\u4eba","text":"<pre><code>import asyncio\nfrom datetime import datetime, timedelta\nfrom collections import deque\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass RateLimitedBot:\n    def __init__(self, max_requests_per_minute: int = 60):\n        self.client = AsyncUltraApiClient()\n        self.max_requests = max_requests_per_minute\n        self.request_times = deque()\n\n    async def rate_limited_request(self, operation):\n        \"\"\"\u6267\u884c\u5e26\u9650\u901f\u7684\u64cd\u4f5c\"\"\"\n        now = datetime.now()\n\n        # \u79fb\u9664\u65e7\u8bf7\u6c42\uff08\u8d85\u8fc7 1 \u5206\u949f\u7684\uff09\n        while self.request_times and self.request_times[0] &lt; now - timedelta(minutes=1):\n            self.request_times.popleft()\n\n        # \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u9650\u5236\n        if len(self.request_times) &gt;= self.max_requests:\n            sleep_time = 60 - (now - self.request_times[0]).total_seconds()\n            if sleep_time &gt; 0:\n                print(f\"\u23f3 \u5df2\u8fbe\u5230\u901f\u7387\u9650\u5236\uff0c\u7b49\u5f85 {sleep_time:.1f}s\")\n                await asyncio.sleep(sleep_time)\n\n        # \u8bb0\u5f55\u8fd9\u6b21\u8bf7\u6c42\n        self.request_times.append(now)\n\n        # \u6267\u884c\u64cd\u4f5c\n        return await operation()\n\n    async def trading_loop(self, trading_pairs: list):\n        \"\"\"\u5e26\u9650\u901f\u7684\u4e3b\u4ea4\u6613\u5faa\u73af\"\"\"\n        print(\"\ud83e\udd16 \u542f\u52a8\u9650\u901f\u4ea4\u6613\u673a\u5668\u4eba...\")\n\n        while True:\n            try:\n                for pair in trading_pairs:\n                    input_mint, output_mint = pair\n\n                    # \u9650\u901f\u4f59\u989d\u68c0\u67e5\n                    wallet = await self.rate_limited_request(\n                        lambda: self.client.get_public_key()\n                    )\n\n                    balances = await self.rate_limited_request(\n                        lambda: self.client.balances(wallet)\n                    )\n\n                    print(f\"\ud83d\udcca \u68c0\u67e5\u4e86 {wallet[:8]}... \u7684\u4f59\u989d\")\n\n                    # \u5728\u8fd9\u91cc\u6dfb\u52a0\u60a8\u7684\u4ea4\u6613\u903b\u8f91\n\n                    # \u4ea4\u6613\u5bf9\u4e4b\u95f4\u7684\u7b49\u5f85\n                    await asyncio.sleep(5)\n\n                # \u4ea4\u6613\u5468\u671f\u4e4b\u95f4\u7684\u7b49\u5f85\n                await asyncio.sleep(60)\n\n            except KeyboardInterrupt:\n                print(\"\ud83d\uded1 \u7528\u6237\u505c\u6b62\u673a\u5668\u4eba\")\n                break\n            except Exception as e:\n                print(f\"\u274c \u4ea4\u6613\u5faa\u73af\u9519\u8bef: {e}\")\n                await asyncio.sleep(30)  # \u91cd\u8bd5\u524d\u7b49\u5f85\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def run_trading_bot():\n    bot = RateLimitedBot(max_requests_per_minute=30)\n    try:\n        pairs = [\n            (\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"),\n        ]\n\n        await bot.trading_loop(pairs)\n\n    finally:\n        await bot.close()\n\n# asyncio.run(run_trading_bot())\n</code></pre>"},{"location":"zh/examples/#_18","title":"\ud83d\udea8 \u9519\u8bef\u5904\u7406\u6a21\u5f0f","text":""},{"location":"zh/examples/#_19","title":"\u7efc\u5408\u9519\u8bef\u5904\u7406\u5668","text":"<pre><code>import asyncio\nimport logging\nfrom typing import Any, Callable\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass ErrorHandler:\n    def __init__(self):\n        self.client = AsyncUltraApiClient()\n        self.setup_logging()\n\n    def setup_logging(self):\n        \"\"\"\u8bbe\u7f6e\u9519\u8bef\u8ddf\u8e2a\u65e5\u5fd7\"\"\"\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            handlers=[\n                logging.FileHandler('jupiter_bot.log'),\n                logging.StreamHandler()\n            ]\n        )\n        self.logger = logging.getLogger(__name__)\n\n    async def safe_execute(self, operation: Callable, *args, **kwargs) -&gt; Any:\n        \"\"\"\u6267\u884c\u5e26\u7efc\u5408\u9519\u8bef\u5904\u7406\u7684\u64cd\u4f5c\"\"\"\n        try:\n            result = await operation(*args, **kwargs)\n\n            # \u68c0\u67e5\u7ed3\u679c\u662f\u5426\u8868\u793a\u5931\u8d25\n            if isinstance(result, dict) and result.get(\"status\") == \"Failed\":\n                error_code = result.get(\"code\")\n                error_message = result.get(\"error\")\n\n                self.logger.error(f\"API \u9519\u8bef [{error_code}]: {error_message}\")\n\n                # \u5904\u7406\u7279\u5b9a\u9519\u8bef\u4ee3\u7801\n                if error_code == \"INSUFFICIENT_BALANCE\":\n                    self.logger.warning(\"\u4f59\u989d\u4e0d\u8db3 - \u505c\u6b62\u64cd\u4f5c\")\n                    return None\n                elif error_code == \"SLIPPAGE_EXCEEDED\":\n                    self.logger.info(\"\u6ed1\u70b9\u8d85\u51fa - \u4ee5\u66f4\u9ad8\u5bb9\u5fcd\u5ea6\u91cd\u8bd5\")\n                    # \u53ef\u4ee5\u5728\u8fd9\u91cc\u5b9e\u73b0\u91cd\u8bd5\u903b\u8f91\n                    return None\n                elif error_code == \"RATE_LIMITED\":\n                    self.logger.warning(\"\u901f\u7387\u9650\u5236 - \u9000\u907f\")\n                    await asyncio.sleep(60)\n                    return None\n\n            return result\n\n        except ConnectionError as e:\n            self.logger.error(f\"\u8fde\u63a5\u9519\u8bef: {e}\")\n            self.logger.info(\"30 \u79d2\u540e\u91cd\u8bd5...\")\n            await asyncio.sleep(30)\n            return None\n\n        except TimeoutError as e:\n            self.logger.error(f\"\u8d85\u65f6\u9519\u8bef: {e}\")\n            self.logger.info(\"\u64cd\u4f5c\u8d85\u65f6 - \u91cd\u8bd5...\")\n            return None\n\n        except ValueError as e:\n            self.logger.error(f\"\u914d\u7f6e\u9519\u8bef: {e}\")\n            self.logger.critical(\"\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u548c\u79c1\u94a5\")\n            raise  # \u914d\u7f6e\u65e0\u6548\u65f6\u4e0d\u7ee7\u7eed\n\n        except Exception as e:\n            self.logger.error(f\"\u610f\u5916\u9519\u8bef: {e}\")\n            self.logger.info(\"\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u64cd\u4f5c...\")\n            return None\n\n    async def monitor_operations(self):\n        \"\"\"\u76d1\u63a7\u548c\u8bb0\u5f55\u5404\u79cd\u64cd\u4f5c\"\"\"\n        operations = [\n            (\"\u83b7\u53d6\u516c\u94a5\", self.client.get_public_key),\n            (\"\u68c0\u67e5\u4f59\u989d\", self.client.balances, \"wallet_address_here\"),\n            (\"\u76fe\u724c\u68c0\u67e5\", self.client.shield, [\"So11111111111111111111111111111111111111112\"]),\n        ]\n\n        for name, operation, *args in operations:\n            self.logger.info(f\"\u6267\u884c: {name}\")\n            result = await self.safe_execute(operation, *args)\n\n            if result is not None:\n                self.logger.info(f\"\u2705 {name} \u6210\u529f\u5b8c\u6210\")\n            else:\n                self.logger.warning(f\"\u274c {name} \u5931\u8d25\u6216\u8fd4\u56de None\")\n\n            await asyncio.sleep(2)  # \u64cd\u4f5c\u4e4b\u95f4\u7684\u5c0f\u5ef6\u8fdf\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def run_error_handling_demo():\n    handler = ErrorHandler()\n    try:\n        await handler.monitor_operations()\n    finally:\n        await handler.close()\n\n# asyncio.run(run_error_handling_demo())\n</code></pre>"},{"location":"zh/examples/#_20","title":"\u91cd\u8bd5\u673a\u5236","text":"<pre><code>import asyncio\nimport random\nfrom typing import Any, Callable\n\nasync def exponential_backoff_retry(\n    operation: Callable,\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 60.0,\n    jitter: bool = True\n) -&gt; Any:\n    \"\"\"\n    \u4f7f\u7528\u6307\u6570\u9000\u907f\u8fdb\u884c\u91cd\u8bd5\n\n    \u53c2\u6570:\n        operation: \u8981\u91cd\u8bd5\u7684\u5f02\u6b65\u51fd\u6570\n        max_retries: \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n        base_delay: \u57fa\u7840\u5ef6\u8fdf\uff08\u79d2\uff09\n        max_delay: \u6700\u5927\u5ef6\u8fdf\uff08\u79d2\uff09\n        jitter: \u6dfb\u52a0\u968f\u673a\u6296\u52a8\u9632\u6b62\u96f7\u7fa4\u6548\u5e94\n    \"\"\"\n    last_exception = None\n\n    for attempt in range(max_retries + 1):\n        try:\n            return await operation()\n\n        except Exception as e:\n            last_exception = e\n\n            if attempt == max_retries:\n                raise last_exception\n\n            # \u4f7f\u7528\u6307\u6570\u9000\u907f\u8ba1\u7b97\u5ef6\u8fdf\n            delay = min(base_delay * (2 ** attempt), max_delay)\n\n            # \u6dfb\u52a0\u6296\u52a8\n            if jitter:\n                delay *= (0.5 + random.random() * 0.5)\n\n            print(f\"\u274c \u7b2c {attempt + 1} \u6b21\u5c1d\u8bd5\u5931\u8d25: {e}\")\n            print(f\"\u23f3 {delay:.1f} \u79d2\u540e\u91cd\u8bd5...\")\n\n            await asyncio.sleep(delay)\n\n    raise last_exception\n\n# \u4f7f\u7528\u793a\u4f8b\nasync def retry_example():\n    from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\n    client = AsyncUltraApiClient()\n    try:\n        # \u7528\u91cd\u8bd5\u903b\u8f91\u5305\u88c5\u4efb\u4f55\u64cd\u4f5c\n        balances = await exponential_backoff_retry(\n            lambda: client.balances(\"wallet_address_here\"),\n            max_retries=3\n        )\n        print(f\"\u2705 \u83b7\u5f97\u4f59\u989d: {balances}\")\n\n    finally:\n        await client.close()\n\n# asyncio.run(retry_example())\n</code></pre>"},{"location":"zh/examples/#_21","title":"\ud83d\ude80 \u6027\u80fd\u4f18\u5316","text":""},{"location":"zh/examples/#_22","title":"\u5e76\u53d1\u5904\u7406","text":"<pre><code>import asyncio\nfrom typing import List\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nclass PerformanceOptimizer:\n    def __init__(self, max_concurrent: int = 10):\n        self.client = AsyncUltraApiClient()\n        self.semaphore = asyncio.Semaphore(max_concurrent)\n\n    async def concurrent_balance_check(self, addresses: List[str]):\n        \"\"\"\u5e76\u53d1\u68c0\u67e5\u591a\u4e2a\u5730\u5740\u7684\u4f59\u989d\"\"\"\n        async def check_single_balance(address):\n            async with self.semaphore:\n                try:\n                    return {\n                        \"address\": address,\n                        \"balances\": await self.client.balances(address),\n                        \"status\": \"success\"\n                    }\n                except Exception as e:\n                    return {\n                        \"address\": address,\n                        \"error\": str(e),\n                        \"status\": \"error\"\n                    }\n\n        print(f\"\ud83d\ude80 \u5e76\u53d1\u68c0\u67e5 {len(addresses)} \u4e2a\u5730\u5740...\")\n        start_time = asyncio.get_event_loop().time()\n\n        tasks = [check_single_balance(addr) for addr in addresses]\n        results = await asyncio.gather(*tasks)\n\n        end_time = asyncio.get_event_loop().time()\n        duration = end_time - start_time\n\n        successful = sum(1 for r in results if r[\"status\"] == \"success\")\n\n        print(f\"\u2705 \u5728 {duration:.2f}s \u5185\u5b8c\u6210\")\n        print(f\"\ud83d\udcca \u6210\u529f\u7387: {successful}/{len(addresses)} ({successful/len(addresses)*100:.1f}%)\")\n\n        return results\n\n    async def batch_shield_check(self, mint_batches: List[List[str]]):\n        \"\"\"\u6279\u91cf\u68c0\u67e5\u4ee3\u5e01\u5b89\u5168\u6027\"\"\"\n        async def check_batch(batch):\n            async with self.semaphore:\n                try:\n                    return await self.client.shield(batch)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n        print(f\"\ud83d\udee1\ufe0f  \u5904\u7406 {len(mint_batches)} \u4e2a\u76fe\u724c\u6279\u6b21...\")\n\n        tasks = [check_batch(batch) for batch in mint_batches]\n        results = await asyncio.gather(*tasks)\n\n        return results\n\n    async def close(self):\n        await self.client.close()\n\n# \u4f7f\u7528\u65b9\u6cd5\nasync def performance_demo():\n    optimizer = PerformanceOptimizer(max_concurrent=5)\n\n    try:\n        # \u6f14\u793a\u5730\u5740\uff08\u66ff\u6362\u4e3a\u771f\u5b9e\u5730\u5740\uff09\n        addresses = [\n            \"11111111111111111111111111111111\",\n            \"22222222222222222222222222222222\",\n            \"33333333333333333333333333333333\",\n            # \u6dfb\u52a0\u66f4\u591a\u5730\u5740\n        ]\n\n        # \u5e76\u53d1\u4f59\u989d\u68c0\u67e5\n        balance_results = await optimizer.concurrent_balance_check(addresses)\n\n        # \u6279\u91cf\u76fe\u724c\u68c0\u67e5\n        mint_batches = [\n            [\"So11111111111111111111111111111111111111112\", \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"],\n            [\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\", \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"],\n        ]\n\n        shield_results = await optimizer.batch_shield_check(mint_batches)\n\n        print(\"\ud83c\udfaf \u6027\u80fd\u4f18\u5316\u6f14\u793a\u5b8c\u6210\uff01\")\n\n    finally:\n        await optimizer.close()\n\n# asyncio.run(performance_demo())\n</code></pre> <p>\u8fd9\u4e9b\u793a\u4f8b\u5c55\u793a\u4e86 Jupiter Python SDK \u7684\u771f\u5b9e\u4f7f\u7528\u6a21\u5f0f\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u6bcf\u4e2a\u793a\u4f8b\u90fd\u662f\u5b8c\u6574\u7684\uff0c\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u5177\u4f53\u7528\u4f8b\u8fdb\u884c\u8c03\u6574\u3002\u8bf7\u8bb0\u4f4f\uff1a</p> <ol> <li>\u59cb\u7ec8\u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef</li> <li>\u4f7f\u7528\u9002\u5f53\u7684\u901f\u7387\u9650\u5236</li> <li>\u4f7f\u7528\u5b8c\u6bd5\u540e\u5173\u95ed\u5ba2\u6237\u7aef</li> <li>\u4e3a\u751f\u4ea7\u73af\u5883\u5b9e\u65bd\u65e5\u5fd7\u8bb0\u5f55</li> <li>\u5148\u7528\u5c0f\u91d1\u989d\u6d4b\u8bd5</li> </ol> <p>\u6709\u5173\u66f4\u8be6\u7ec6\u7684 API \u6587\u6863\uff0c\u8bf7\u53c2\u9605 API \u53c2\u8003\u6587\u6863\u3002</p>"},{"location":"zh/getting-started/","title":"Jupiter Python SDK \u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u5728\u51e0\u5206\u949f\u5185\u5f00\u59cb\u4f7f\u7528 Jupiter Python SDK\u3002</p>"},{"location":"zh/getting-started/#_1","title":"\ud83d\udccb \u524d\u7f6e\u8981\u6c42","text":"<p>\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5177\u5907\uff1a</p> <ul> <li>Python 3.9+ \u5df2\u5b89\u88c5\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a</li> <li>Solana \u94b1\u5305 \u5e76\u5305\u542b\u4e00\u4e9b SOL \u7528\u4e8e\u4ea4\u6613\u8d39\u7528</li> <li>\u60a8\u94b1\u5305\u7684\u79c1\u94a5\uff08\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u5b89\u5168\u5730\u8bbe\u7f6e\uff09</li> </ul>"},{"location":"zh/getting-started/#_2","title":"\ud83d\udee0\ufe0f \u5b89\u88c5","text":""},{"location":"zh/getting-started/#1-uv","title":"\u65b9\u6848 1\uff1a\u4f7f\u7528 uv\uff08\u63a8\u8350\uff09","text":"<p>\u9996\u5148\uff0c\u8bf7\u5b89\u88c5 uv\uff1a</p> <pre><code># \u5b89\u88c5 pyjupiter\nuv add pyjupiter\n</code></pre>"},{"location":"zh/getting-started/#_3","title":"\ud83d\udd11 \u73af\u5883\u8bbe\u7f6e","text":""},{"location":"zh/getting-started/#1","title":"1. \u8bbe\u7f6e\u60a8\u7684\u79c1\u94a5","text":"<p>\u60a8\u9700\u8981\u5c06 Solana \u94b1\u5305\u7684\u79c1\u94a5\u8bbe\u7f6e\u4e3a\u73af\u5883\u53d8\u91cf\u3002SDK \u652f\u6301\u4e24\u79cd\u683c\u5f0f\uff1a</p>"},{"location":"zh/getting-started/#base58","title":"Base58 \u683c\u5f0f\uff08\u63a8\u8350\uff09","text":"<pre><code># \u5bfc\u51fa\u60a8\u7684\u79c1\u94a5\uff08Base58 \u683c\u5f0f\uff09\nexport PRIVATE_KEY=\"your_base58_private_key_here\"\n</code></pre>"},{"location":"zh/getting-started/#uint8","title":"Uint8 \u6570\u7ec4\u683c\u5f0f","text":"<pre><code># \u6216\u4f5c\u4e3a uint8 \u6570\u7ec4\nexport PRIVATE_KEY=\"[10,229,131,132,213,96,74,22,...]\"\n</code></pre>"},{"location":"zh/getting-started/#2-jupiter-api","title":"2. \u53ef\u9009\uff1a\u83b7\u53d6 Jupiter API \u5bc6\u94a5","text":"<p>\u8981\u83b7\u5f97\u589e\u5f3a\u7684\u901f\u7387\u9650\u5236\u548c\u529f\u80fd\uff0c\u8bf7\u4ece Jupiter Portal \u83b7\u53d6 API \u5bc6\u94a5\uff1a</p> <pre><code>export JUPITER_API_KEY=\"your_api_key_here\"\n</code></pre>"},{"location":"zh/getting-started/#3-env","title":"3. \u521b\u5efa .env \u6587\u4ef6\uff08\u53ef\u9009\uff09","text":"<p>\u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a <code>.env</code> \u6587\u4ef6\uff1a</p> <pre><code>PRIVATE_KEY=your_base58_private_key_here\nJUPITER_API_KEY=your_api_key_here\n</code></pre>"},{"location":"zh/getting-started/#_4","title":"\ud83d\ude80 \u60a8\u7684\u7b2c\u4e00\u6b21\u4ea4\u6362","text":"<p>\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4ee3\u5e01\u4ea4\u6362\u793a\u4f8b\u5f00\u59cb\uff1a</p>"},{"location":"zh/getting-started/#_5","title":"\u5f02\u6b65\u793a\u4f8b\uff08\u63a8\u8350\uff09","text":"<pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\nasync def main():\n    # \u521d\u59cb\u5316\u5ba2\u6237\u7aef\n    client = AsyncUltraApiClient()\n\n    print(\"\ud83d\udd0d \u83b7\u53d6\u94b1\u5305\u5730\u5740...\")\n    wallet_address = await client.get_public_key()\n    print(f\"\ud83d\udccd \u94b1\u5305\u5730\u5740: {wallet_address}\")\n\n    # \u521b\u5efa\u4ea4\u6362\u8ba2\u5355\uff1a0.01 WSOL \u2192 USDC\n    order_request = UltraOrderRequest(\n        input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n        output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        amount=10000000,  # 0.01 WSOL (\u4ee5 lamports \u4e3a\u5355\u4f4d)\n        taker=wallet_address,\n    )\n\n    try:\n        print(\"\ud83d\udd04 \u6267\u884c\u4ea4\u6362...\")\n        response = await client.order_and_execute(order_request)\n\n        if response.get(\"status\") == \"Success\":\n            signature = response[\"signature\"]\n            print(f\"\u2705 \u4ea4\u6362\u6210\u529f\uff01\")\n            print(f\"\ud83d\udd17 \u4ea4\u6613\u94fe\u63a5: https://solscan.io/tx/{signature}\")\n        else:\n            print(f\"\u274c \u4ea4\u6362\u5931\u8d25: {response.get('error')}\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 \u9519\u8bef: {e}\")\n    finally:\n        await client.close()\n\n# \u8fd0\u884c\u5f02\u6b65\u51fd\u6570\nasyncio.run(main())\n</code></pre>"},{"location":"zh/getting-started/#_6","title":"\u540c\u6b65\u793a\u4f8b","text":"<pre><code>from pyjupiter.clients.ultra_api_client import UltraApiClient\nfrom pyjupiter.models.ultra_api.ultra_order_request_model import UltraOrderRequest\n\n# \u521d\u59cb\u5316\u540c\u6b65\u5ba2\u6237\u7aef\nclient = UltraApiClient()\n\nprint(\"\ud83d\udd0d \u83b7\u53d6\u94b1\u5305\u5730\u5740...\")\nwallet_address = client.get_public_key()\nprint(f\"\ud83d\udccd \u94b1\u5305\u5730\u5740: {wallet_address}\")\n\n# \u521b\u5efa\u4ea4\u6362\u8ba2\u5355\norder_request = UltraOrderRequest(\n    input_mint=\"So11111111111111111111111111111111111111112\",  # WSOL\n    output_mint=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n    amount=10000000,  # 0.01 WSOL\n    taker=wallet_address,\n)\n\ntry:\n    print(\"\ud83d\udd04 \u6267\u884c\u4ea4\u6362...\")\n    response = client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Success\":\n        signature = response[\"signature\"]\n        print(f\"\u2705 \u4ea4\u6362\u6210\u529f\uff01\")\n        print(f\"\ud83d\udd17 \u4ea4\u6613\u94fe\u63a5: https://solscan.io/tx/{signature}\")\n    else:\n        print(f\"\u274c \u4ea4\u6362\u5931\u8d25: {response.get('error')}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udca5 \u9519\u8bef: {e}\")\nfinally:\n    client.close()\n</code></pre>"},{"location":"zh/getting-started/#_7","title":"\ud83d\udcca \u68c0\u67e5\u60a8\u7684\u4f59\u989d","text":"<p>\u5728\u8fdb\u884c\u4ea4\u6362\u4e4b\u524d\uff0c\u68c0\u67e5\u60a8\u7684\u4ee3\u5e01\u4f59\u989d\u662f\u5f88\u6709\u7528\u7684\uff1a</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_balances():\n    client = AsyncUltraApiClient()\n\n    try:\n        # \u83b7\u53d6\u60a8\u7684\u94b1\u5305\u5730\u5740\n        address = await client.get_public_key()\n        print(f\"\ud83d\udccd \u68c0\u67e5\u4f59\u989d\u5730\u5740: {address}\")\n\n        # \u83b7\u53d6\u4f59\u989d\n        balances = await client.balances(address)\n\n        print(\"\\n\ud83d\udcb0 \u4ee3\u5e01\u4f59\u989d:\")\n        print(\"-\" * 40)\n\n        for token, details in balances.items():\n            amount = details.get('uiAmount', 0)\n            frozen = details.get('isFrozen', False)\n            status = \"\ud83e\uddca \u51bb\u7ed3\" if frozen else \"\u2705 \u6d3b\u8dc3\"\n            print(f\"{token:&lt;8} {amount:&gt;12.6f} {status}\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 \u9519\u8bef: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(check_balances())\n</code></pre>"},{"location":"zh/getting-started/#_8","title":"\ud83d\udee1\ufe0f \u68c0\u67e5\u4ee3\u5e01\u5b89\u5168\u6027","text":"<p>\u4ea4\u6613\u524d\u8bf7\u52a1\u5fc5\u9a8c\u8bc1\u4ee3\u5e01\u5b89\u5168\u6027\uff1a</p> <pre><code>import asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def check_token_safety():\n    client = AsyncUltraApiClient()\n\n    # \u8981\u68c0\u67e5\u7684\u4ee3\u5e01\n    tokens = [\n        \"So11111111111111111111111111111111111111112\",  # WSOL\n        \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",  # USDC\n        \"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\",  # BONK\n    ]\n\n    try:\n        print(\"\ud83d\udee1\ufe0f \u68c0\u67e5\u4ee3\u5e01\u5b89\u5168\u6027...\")\n        shield_response = await client.shield(tokens)\n\n        for mint in tokens:\n            warnings = shield_response.get(\"warnings\", {}).get(mint, [])\n\n            if warnings:\n                print(f\"\u26a0\ufe0f  {mint[:8]}... \u6709\u8b66\u544a:\")\n                for warning in warnings:\n                    print(f\"   - {warning.get('type')}: {warning.get('message')}\")\n            else:\n                print(f\"\u2705 {mint[:8]}... \u770b\u8d77\u6765\u5b89\u5168\")\n\n    except Exception as e:\n        print(f\"\ud83d\udca5 \u9519\u8bef: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(check_token_safety())\n</code></pre>"},{"location":"zh/getting-started/#_9","title":"\u2699\ufe0f \u5ba2\u6237\u7aef\u914d\u7f6e","text":""},{"location":"zh/getting-started/#_10","title":"\u57fa\u7840\u914d\u7f6e","text":"<pre><code>from pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\n# \u9ed8\u8ba4\u914d\u7f6e\nclient = AsyncUltraApiClient()\n\n# \u4f7f\u7528 API \u5bc6\u94a5\nclient = AsyncUltraApiClient(api_key=\"your_api_key\")\n\n# \u81ea\u5b9a\u4e49\u79c1\u94a5\u73af\u5883\u53d8\u91cf\nclient = AsyncUltraApiClient(private_key_env_var=\"MY_PRIVATE_KEY\")\n</code></pre>"},{"location":"zh/getting-started/#_11","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code># \u81ea\u5b9a\u4e49\u5ba2\u6237\u7aef\u8bbe\u7f6e\nclient = AsyncUltraApiClient(\n    api_key=\"your_api_key\",\n    client_kwargs={\n        \"timeout\": 30,  # 30 \u79d2\u8d85\u65f6\n        \"verify\": True,  # SSL \u9a8c\u8bc1\n        \"headers\": {\n            \"User-Agent\": \"MyApp/1.0\",\n        }\n    }\n)\n</code></pre>"},{"location":"zh/getting-started/#_12","title":"\u4f7f\u7528\u4ee3\u7406","text":"<pre><code># SOCKS5 \u4ee3\u7406\nproxies = {\"https\": \"socks5://user:pass@host:port\"}\nclient = AsyncUltraApiClient(client_kwargs={\"proxies\": proxies})\n\n# HTTP \u4ee3\u7406\nproxies = {\n    \"http\": \"http://proxy.example.com:8080\",\n    \"https\": \"http://proxy.example.com:8080\",\n}\nclient = AsyncUltraApiClient(client_kwargs={\"proxies\": proxies})\n</code></pre>"},{"location":"zh/getting-started/#_13","title":"\ud83d\udd0d \u5e38\u7528\u4ee3\u5e01\u5730\u5740","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u7528\u4e8e\u6d4b\u8bd5\u7684\u70ed\u95e8 Solana \u4ee3\u5e01\u94f8\u9020\u5730\u5740\uff1a</p> \u4ee3\u5e01 \u7b26\u53f7 \u94f8\u9020\u5730\u5740 \u5c0f\u6570\u4f4d \u5305\u88c5 SOL WSOL <code>So11111111111111111111111111111111111111112</code> 9 \u7f8e\u5143\u786c\u5e01 USDC <code>EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v</code> 6 \u6cf0\u8fbe\u5e01 USDT <code>Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB</code> 6 Bonk BONK <code>DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263</code> 5"},{"location":"zh/getting-started/#_14","title":"\ud83d\udca1 \u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/getting-started/#1_1","title":"1. \u59cb\u7ec8\u5173\u95ed\u5ba2\u6237\u7aef","text":"<pre><code># \u4f7f\u7528 try/finally\nclient = AsyncUltraApiClient()\ntry:\n    # \u60a8\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\n    pass\nfinally:\n    await client.close()\n\n# \u6216\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff08\u5982\u679c\u53ef\u7528\uff09\nasync with AsyncUltraApiClient() as client:\n    # \u60a8\u7684\u4ee3\u7801\u5728\u8fd9\u91cc\n    pass\n</code></pre>"},{"location":"zh/getting-started/#2","title":"2. \u4f18\u96c5\u5730\u5904\u7406\u9519\u8bef","text":"<pre><code>try:\n    response = await client.order_and_execute(order_request)\n\n    if response.get(\"status\") == \"Failed\":\n        error_code = response.get(\"code\")\n        if error_code == \"INSUFFICIENT_BALANCE\":\n            print(\"\u274c \u4f59\u989d\u4e0d\u8db3\u65e0\u6cd5\u4ea4\u6362\")\n        elif error_code == \"SLIPPAGE_EXCEEDED\":\n            print(\"\u274c \u8d85\u51fa\u6ed1\u70b9\u5bb9\u5fcd\u5ea6\")\n        else:\n            print(f\"\u274c \u4ea4\u6613\u5931\u8d25: {response.get('error')}\")\n    else:\n        print(f\"\u2705 \u6210\u529f: {response['signature']}\")\n\nexcept Exception as e:\n    print(f\"\ud83d\udca5 \u610f\u5916\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"zh/getting-started/#3","title":"3. \u6b63\u786e\u8ba1\u7b97\u91d1\u989d","text":"<pre><code># \u59cb\u7ec8\u4f7f\u7528\u6700\u5c0f\u5355\u4f4d\nsol_amount = 0.01  # SOL\nlamports = int(sol_amount * 10**9)  # \u8f6c\u6362\u4e3a lamports\n\nusdc_amount = 10.0  # USDC\nusdc_units = int(usdc_amount * 10**6)  # USDC \u6709 6 \u4f4d\u5c0f\u6570\n</code></pre>"},{"location":"zh/getting-started/#_15","title":"\ud83d\udea8 \u6545\u969c\u6392\u9664","text":""},{"location":"zh/getting-started/#_16","title":"\u5e38\u89c1\u95ee\u9898","text":"\u95ee\u9898 \u89e3\u51b3\u65b9\u6848 <code>ValueError: Invalid private key format</code> \u68c0\u67e5\u60a8\u7684\u79c1\u94a5\u683c\u5f0f\uff08Base58 \u6216\u6570\u7ec4\uff09 <code>ConnectionError</code> \u68c0\u67e5\u60a8\u7684\u7f51\u7edc\u8fde\u63a5\u548c\u4ee3\u7406\u8bbe\u7f6e <code>Insufficient balance</code> \u786e\u4fdd\u60a8\u6709\u8db3\u591f\u7684\u4ee3\u5e01\u548c SOL \u7528\u4e8e\u8d39\u7528 <code>Slippage exceeded</code> \u5e02\u573a\u6ce2\u52a8\u592a\u5927\uff1b\u91cd\u8bd5\u6216\u8c03\u6574\u6ed1\u70b9"},{"location":"zh/getting-started/#_17","title":"\u73af\u5883\u53d8\u91cf\u95ee\u9898","text":"<pre><code># \u68c0\u67e5\u60a8\u7684\u73af\u5883\u53d8\u91cf\u662f\u5426\u5df2\u8bbe\u7f6e\necho $PRIVATE_KEY\n\n# \u5982\u679c\u4e3a\u7a7a\uff0c\u91cd\u65b0\u8bbe\u7f6e\nexport PRIVATE_KEY=\"your_private_key_here\"\n</code></pre>"},{"location":"zh/getting-started/#_18","title":"\u7f51\u7edc\u95ee\u9898","text":"<pre><code># \u6d4b\u8bd5\u57fa\u672c\u8fde\u63a5\nimport asyncio\nfrom pyjupiter.clients.ultra_api_client import AsyncUltraApiClient\n\nasync def test_connection():\n    client = AsyncUltraApiClient()\n    try:\n        address = await client.get_public_key()\n        print(f\"\u2705 \u8fde\u63a5\u6210\u529f\uff01\u94b1\u5305: {address}\")\n    except Exception as e:\n        print(f\"\u274c \u8fde\u63a5\u5931\u8d25: {e}\")\n    finally:\n        await client.close()\n\nasyncio.run(test_connection())\n</code></pre>"},{"location":"zh/getting-started/#_19","title":"\ud83d\udcda \u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u638c\u63e1\u4e86\u57fa\u7840\u77e5\u8bc6\uff0c\u63a2\u7d22\u66f4\u591a\u9ad8\u7ea7\u529f\u80fd\uff1a</p> <ol> <li>API \u53c2\u8003 - \u5b8c\u6574\u7684\u65b9\u6cd5\u6587\u6863</li> <li>\u4ee3\u7801\u793a\u4f8b - \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b\u548c\u6a21\u5f0f</li> <li>Ultra API \u6587\u6863 - \u5b98\u65b9 Jupiter \u6587\u6863</li> </ol>"},{"location":"zh/getting-started/#_20","title":"\ud83c\udf89 \u606d\u559c\uff01","text":"<p>\u60a8\u5df2\u7ecf\u6210\u529f\u8bbe\u7f6e\u4e86 Jupiter Python SDK \u5e76\u8fdb\u884c\u4e86\u7b2c\u4e00\u6b21\u4ee3\u5e01\u4ea4\u6362\u3002\u73b0\u5728\u60a8\u5df2\u51c6\u5907\u597d\u5728 Solana \u4e0a\u6784\u5efa\u590d\u6742\u7684 DeFi \u5e94\u7528\u7a0b\u5e8f\uff01</p>"}]}